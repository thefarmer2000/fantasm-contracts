{
  "address": "0x952470bfA5326A31301396dF9c05ea774685562a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "LogPoolAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "LogRewardPerSecond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "LogSetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "harvestAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pools",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardMinter",
      "outputs": [
        {
          "internalType": "contract IWonderfulStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "contract IRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWonderfulStaking",
          "name": "_rewardMinter",
          "type": "address"
        }
      ],
      "name": "setRewardMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct WonderfulChef.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawAndHarvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc349e41d9073e634319f7af345147d90fb4133eb21d8e3fafb90b203dc24d5d4",
  "receipt": {
    "to": null,
    "from": "0x92F56Ca0820ad4eBA8C98a586a46b348BbFc80fe",
    "contractAddress": "0x952470bfA5326A31301396dF9c05ea774685562a",
    "transactionIndex": 1,
    "gasUsed": "11477580",
    "logsBloom": "0x
    "blockHash": "0x671d2c638a778d7d30ef7807a4c53653d76f908b4d62e3cec33b7221401e78d7",
    "transactionHash": "0xc349e41d9073e634319f7af345147d90fb4133eb21d8e3fafb90b203dc24d5d4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 58071901,
        "transactionHash": "0xc349e41d9073e634319f7af345147d90fb4133eb21d8e3fafb90b203dc24d5d4",
        "address": "0x952470bfA5326A31301396dF9c05ea774685562a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092f56ca0820ad4eba8c98a586a46b348bbfc80fe"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x671d2c638a778d7d30ef7807a4c53653d76f908b4d62e3cec33b7221401e78d7"
      }
    ],
    "blockNumber": 58071901,
    "cumulativeGasUsed": "11477580",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0f37fbee7d56cb39e34800a787a815e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"LogRewardPerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvestAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMinter\",\"outputs\":[{\"internalType\":\"contract IWonderfulStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWonderfulStaking\",\"name\":\"_rewardMinter\",\"type\":\"address\"}],\"name\":\"setRewardMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct WonderfulChef.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAndHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,address,address)\":{\"params\":{\"_lpToken\":\"Address of the LP ERC-20 token.\",\"_rewarder\":\"Address of the rewarder delegate.\",\"allocPoint\":\"AP of the new pool.\"}},\"deposit(uint256,uint256,address)\":{\"params\":{\"amount\":\"LP token amount to deposit.\",\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"The receiver of `amount` deposit benefit.\"}},\"emergencyWithdraw(uint256,address)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of the LP tokens.\"}},\"harvest(uint256,address)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of rewards.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingReward(uint256,address)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"set(uint256,uint256,address,bool)\":{\"params\":{\"_allocPoint\":\"New AP of the pool.\",\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_rewarder\":\"Address of the rewarder delegate.\",\"overwrite\":\"True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\"}},\"setRewardMinter(address)\":{\"params\":{\"_rewardMinter\":\"Address of MultiFeeDistribution contract\"}},\"setRewardPerSecond(uint256)\":{\"params\":{\"_rewardPerSecond\":\"The amount of reward to be distributed per second.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}},\"withdraw(uint256,uint256,address)\":{\"params\":{\"amount\":\"LP token amount to withdraw.\",\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of the LP tokens.\"}},\"withdrawAndHarvest(uint256,uint256,address)\":{\"params\":{\"amount\":\"LP token amount to withdraw.\",\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of the LP tokens and rewards.\"}}},\"stateVariables\":{\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(uint256,address,address)\":{\"notice\":\"Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.\"},\"deposit(uint256,uint256,address)\":{\"notice\":\"Deposit LP tokens to MCV2 for reward allocation.\"},\"emergencyWithdraw(uint256,address)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest proceeds for transaction sender to `to`.\"},\"lpToken(uint256)\":{\"notice\":\"Address of the LP token for each MCV2 pool.\"},\"massUpdatePools()\":{\"notice\":\"Update reward variables for all pools. Be careful of gas spending!\"},\"pendingReward(uint256,address)\":{\"notice\":\"View function to see pending reward on frontend.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each MCV2 pool.\"},\"poolLength()\":{\"notice\":\"Returns the number of MCV2 pools.\"},\"rewarder(uint256)\":{\"notice\":\"Address of each `IRewarder` contract in MCV2.\"},\"set(uint256,uint256,address,bool)\":{\"notice\":\"Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\"},\"setRewardMinter(address)\":{\"notice\":\"Set the address of rewardMinter.  Can only be called ONCE by the owner.\"},\"setRewardPerSecond(uint256)\":{\"notice\":\"Sets the reward per second to be distributed. Can only be called by the owner.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"},\"withdraw(uint256,uint256,address)\":{\"notice\":\"Withdraw LP tokens from MCV2.\"},\"withdrawAndHarvest(uint256,uint256,address)\":{\"notice\":\"Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farms/WonderfulChef.sol\":\"WonderfulChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/farms/WonderfulChef.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../interfaces/IWonderfulStaking.sol\\\";\\r\\nimport \\\"../interfaces/IRewarder.sol\\\";\\r\\n\\r\\ncontract WonderfulChef is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        int256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 accRewardPerShare;\\r\\n        uint256 lastRewardTime;\\r\\n        uint256 allocPoint;\\r\\n    }\\r\\n\\r\\n    IWonderfulStaking public rewardMinter;\\r\\n\\r\\n    /// @notice Info of each MCV2 pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    /// @notice Address of the LP token for each MCV2 pool.\\r\\n    IERC20[] public lpToken;\\r\\n    /// @notice Address of each `IRewarder` contract in MCV2.\\r\\n    IRewarder[] public rewarder;\\r\\n\\r\\n    /// @notice Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n\\r\\n    uint256 public rewardPerSecond;\\r\\n    uint256 private constant ACC_REWARD_PRECISION = 1e12;\\r\\n    uint256 private constant MAX_REWARD_PER_SECOND = 1e18; // 1 token per second\\r\\n    uint256 private constant MAX_NUM_OF_POOLS = 24;\\r\\n\\r\\n    /* ========== PUBLIC FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Returns the number of MCV2 pools.\\r\\n    function poolLength() public view returns (uint256 pools) {\\r\\n        pools = poolInfo.length;\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see pending reward on frontend.\\r\\n    /// @param _pid The index of the pool. See `poolInfo`.\\r\\n    /// @param _user Address of user.\\r\\n    /// @return pending reward for a given user.\\r\\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256 pending) {\\r\\n        PoolInfo memory pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\r\\n        uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\\r\\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\\r\\n            uint256 time = block.timestamp - pool.lastRewardTime;\\r\\n            uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) / totalAllocPoint;\\r\\n            accRewardPerShare += (rewardAmount * ACC_REWARD_PRECISION) / lpSupply;\\r\\n        }\\r\\n        pending = uint256(int256((user.amount * accRewardPerShare) / ACC_REWARD_PRECISION) - user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables of the given pool.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @return pool Returns the pool that was updated.\\r\\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\r\\n        pool = poolInfo[pid];\\r\\n        if (block.timestamp > pool.lastRewardTime) {\\r\\n            uint256 lpSupply = lpToken[pid].balanceOf(address(this));\\r\\n            if (lpSupply > 0) {\\r\\n                uint256 time = block.timestamp - pool.lastRewardTime;\\r\\n                uint256 rewardAmount = (time * rewardPerSecond * pool.allocPoint) / totalAllocPoint;\\r\\n                pool.accRewardPerShare += (rewardAmount * ACC_REWARD_PRECISION) / lpSupply;\\r\\n            }\\r\\n            pool.lastRewardTime = block.timestamp;\\r\\n            poolInfo[pid] = pool;\\r\\n            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accRewardPerShare);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 len = poolInfo.length;\\r\\n        for (uint256 i = 0; i < len; ++i) {\\r\\n            updatePool(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit LP tokens to MCV2 for reward allocation.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param amount LP token amount to deposit.\\r\\n    /// @param to The receiver of `amount` deposit benefit.\\r\\n    function deposit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) public {\\r\\n        PoolInfo memory pool = updatePool(pid);\\r\\n        UserInfo storage user = userInfo[pid][to];\\r\\n\\r\\n        // Effects\\r\\n        user.amount += amount;\\r\\n        user.rewardDebt += int256((amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION);\\r\\n\\r\\n        // Interactions\\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onReward(pid, to, to, 0, user.amount);\\r\\n        }\\r\\n\\r\\n        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        emit Deposit(msg.sender, pid, amount, to);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw LP tokens from MCV2.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param amount LP token amount to withdraw.\\r\\n    /// @param to Receiver of the LP tokens.\\r\\n    function withdraw(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) public {\\r\\n        PoolInfo memory pool = updatePool(pid);\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n\\r\\n        // Effects\\r\\n        user.rewardDebt -= int256((amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION);\\r\\n        user.amount -= amount;\\r\\n\\r\\n        // Interactions\\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onReward(pid, msg.sender, to, 0, user.amount);\\r\\n        }\\r\\n\\r\\n        lpToken[pid].safeTransfer(to, amount);\\r\\n\\r\\n        emit Withdraw(msg.sender, pid, amount, to);\\r\\n    }\\r\\n\\r\\n    /// @notice Harvest proceeds for transaction sender to `to`.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param to Receiver of rewards.\\r\\n    function harvest(uint256 pid, address to) public {\\r\\n        PoolInfo memory pool = updatePool(pid);\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        int256 accumulatedReward = int256((user.amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION);\\r\\n        uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\\r\\n\\r\\n        // Effects\\r\\n        user.rewardDebt = accumulatedReward;\\r\\n\\r\\n        // Interactions\\r\\n        if (_pendingReward != 0) {\\r\\n            rewardMinter.mint(to, _pendingReward);\\r\\n        }\\r\\n\\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onReward(pid, msg.sender, to, _pendingReward, user.amount);\\r\\n        }\\r\\n\\r\\n        emit Harvest(msg.sender, pid, _pendingReward);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param amount LP token amount to withdraw.\\r\\n    /// @param to Receiver of the LP tokens and rewards.\\r\\n    function withdrawAndHarvest(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) public {\\r\\n        PoolInfo memory pool = updatePool(pid);\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        int256 accumulatedReward = int256((user.amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION);\\r\\n        uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\\r\\n\\r\\n        // Effects\\r\\n        user.rewardDebt = accumulatedReward - int256((amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION);\\r\\n        user.amount -= amount;\\r\\n\\r\\n        // Interactions\\r\\n        if (_pendingReward != 0) {\\r\\n            rewardMinter.mint(to, _pendingReward);\\r\\n        }\\r\\n\\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onReward(pid, msg.sender, to, _pendingReward, user.amount);\\r\\n        }\\r\\n\\r\\n        lpToken[pid].safeTransfer(to, amount);\\r\\n\\r\\n        emit Withdraw(msg.sender, pid, amount, to);\\r\\n        emit Harvest(msg.sender, pid, _pendingReward);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @param to Receiver of the LP tokens.\\r\\n    function emergencyWithdraw(uint256 pid, address to) public {\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n\\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onReward(pid, msg.sender, to, 0, 0);\\r\\n        }\\r\\n\\r\\n        // Note: transfer can fail or succeed if `amount` is zero.\\r\\n        lpToken[pid].safeTransfer(to, amount);\\r\\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\\r\\n    }\\r\\n\\r\\n    function harvestAllRewards(address to) external {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            harvest(pid, to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    function checkPoolDuplicate(IERC20 _lpToken) internal view {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            require(lpToken[pid] != _lpToken, \\\"add: existing pool?\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\\r\\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n    /// @param allocPoint AP of the new pool.\\r\\n    /// @param _lpToken Address of the LP ERC-20 token.\\r\\n    /// @param _rewarder Address of the rewarder delegate.\\r\\n    function add(\\r\\n        uint256 allocPoint,\\r\\n        IERC20 _lpToken,\\r\\n        IRewarder _rewarder\\r\\n    ) public onlyOwner {\\r\\n        checkPoolDuplicate(_lpToken);\\r\\n        massUpdatePools();\\r\\n        totalAllocPoint += allocPoint;\\r\\n        lpToken.push(_lpToken);\\r\\n        rewarder.push(_rewarder);\\r\\n\\r\\n        poolInfo.push(PoolInfo({allocPoint: allocPoint, lastRewardTime: block.timestamp, accRewardPerShare: 0}));\\r\\n        require(poolInfo.length <= MAX_NUM_OF_POOLS, \\\"WonderfulChef::add: > MAX_NUM_OF_POOLS\\\");\\r\\n        emit LogPoolAddition(lpToken.length - 1, allocPoint, _lpToken, _rewarder);\\r\\n    }\\r\\n\\r\\n    /// @notice Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\\r\\n    /// @param _pid The index of the pool. See `poolInfo`.\\r\\n    /// @param _allocPoint New AP of the pool.\\r\\n    /// @param _rewarder Address of the rewarder delegate.\\r\\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        IRewarder _rewarder,\\r\\n        bool overwrite\\r\\n    ) public onlyOwner {\\r\\n        massUpdatePools();\\r\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        if (overwrite) {\\r\\n            rewarder[_pid] = _rewarder;\\r\\n        }\\r\\n        emit LogSetPool(_pid, _allocPoint, overwrite ? _rewarder : rewarder[_pid], overwrite);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\\r\\n    /// @param _rewardPerSecond The amount of reward to be distributed per second.\\r\\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\\r\\n        require(_rewardPerSecond <= MAX_REWARD_PER_SECOND, \\\"WonderfulChef::setRewardPerSecond: > MAX_REWARD_PER_SECOND\\\");\\r\\n        massUpdatePools();\\r\\n        rewardPerSecond = _rewardPerSecond;\\r\\n        emit LogRewardPerSecond(_rewardPerSecond);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the address of rewardMinter.  Can only be called ONCE by the owner.\\r\\n    /// @param _rewardMinter Address of MultiFeeDistribution contract\\r\\n    function setRewardMinter(IWonderfulStaking _rewardMinter) external {\\r\\n        require(address(rewardMinter) == address(0), \\\"WonderfulChef::setRewardMinter: Cannot redefine rewardMinter\\\");\\r\\n        rewardMinter = _rewardMinter;\\r\\n    }\\r\\n\\r\\n    /* =============== EVENTS ==================== */\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);\\r\\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);\\r\\n    event LogUpdatePool(uint256 indexed pid, uint256 lastRewardTime, uint256 lpSupply, uint256 accRewardPerShare);\\r\\n    event LogRewardPerSecond(uint256 rewardPerSecond);\\r\\n}\\r\\n\",\"keccak256\":\"0xc414612f1feb855e38160401c2a236ab38be40d927e75e4f9820262a66301960\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IRewarder {\\r\\n    function onReward(\\r\\n        uint256 pid,\\r\\n        address user,\\r\\n        address recipient,\\r\\n        uint256 rewardAmount,\\r\\n        uint256 newLpAmount\\r\\n    ) external;\\r\\n\\r\\n    function pendingTokens(\\r\\n        uint256 pid,\\r\\n        address user,\\r\\n        uint256 rewardAmount\\r\\n    ) external view returns (IERC20[] memory, uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xde513086ac358b4b25c30d0ec6392b0e86b20d11a0bc1e3ba5b762c518c0164b\",\"license\":\"MIT\"},\"contracts/interfaces/IWonderfulStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IWonderfulStaking {\\r\\n    function addReward(address rewardsToken, address distributor) external;\\r\\n\\r\\n    function mint(address user, uint256 amount) external;\\r\\n\\r\\n    function notifyRewardAmount(address rewardsToken, uint256 reward) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8b283e66fb158cd5570ec809930abf2821749ce93b7c0977bcdfd8c8cad484d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060065534801561001557600080fd5b5061001f33610024565b610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611e95806100836000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063a7a0b84a1161007c578063a7a0b84a14610316578063ab7de09814610329578063c346253d1461033c578063d1abb9071461034f578063f2fde38b14610362578063fbe6cf6a1461037557600080fd5b80638da5cb5b1461027c5780638dbdbe6d1461028d5780638f10369a146102a057806393f1a40b146102a957806398969e82146102f05780639b8e55631461030357600080fd5b806351eb05a61161011557806351eb05a6146101e6578063630b5ba11461021b57806366da581514610223578063715018a61461023657806378ed5d1f1461023e57806388bba42f1461026957600080fd5b8063081e3eda1461015d5780630ad58d2f146101745780631526fe271461018957806317caf6f1146101b757806318fccc76146101c05780632f940c70146101d3575b600080fd5b6002545b6040519081526020015b60405180910390f35b610187610182366004611bfd565b610388565b005b61019c610197366004611b5d565b610541565b6040805193845260208401929092529082015260600161016b565b61016160065481565b6101876101ce366004611b8d565b610574565b6101876101e1366004611b8d565b61072d565b6101f96101f4366004611b5d565b610878565b604080518251815260208084015190820152918101519082015260600161016b565b610187610abc565b610187610231366004611b5d565b610ae8565b610187610bb6565b61025161024c366004611b5d565b610bca565b6040516001600160a01b03909116815260200161016b565b610187610277366004611c2a565b610bf4565b6000546001600160a01b0316610251565b61018761029b366004611bfd565b610d79565b61016160075481565b6102db6102b7366004611b8d565b60056020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161016b565b6101616102fe366004611b8d565b610f2a565b600154610251906001600160a01b031681565b610187610324366004611b1e565b611106565b610187610337366004611bbc565b6111a7565b61025161034a366004611b5d565b6113bf565b61018761035d366004611bfd565b6113cf565b610187610370366004611b1e565b61163c565b610187610383366004611b1e565b6116b5565b600061039384610878565b6000858152600560209081526040808320338452909152902081519192509064e8d4a51000906103c39086611d6a565b6103cd9190611d4a565b8160010160008282546103e09190611d89565b90915550508054849082906000906103f9908490611dc8565b9250508190555060006004868154811061042357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156104a95781546040516344af0fa760e01b81526001600160a01b038316916344af0fa791610476918a9133918a9160009190600401611cc2565b600060405180830381600087803b15801561049057600080fd5b505af11580156104a4573d6000803e3d6000fd5b505050505b6104eb8486600389815481106104cf57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691906116e2565b836001600160a01b031686336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328860405161053191815260200190565b60405180910390a4505050505050565b6002818154811061055157600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b600061057f83610878565b6000848152600560209081526040808320338452909152812082518154939450909264e8d4a51000916105b191611d6a565b6105bb9190611d4a565b905060008260010154826105cf9190611d89565b6001840183905590508015610645576001546040516340c10f1960e01b81526001600160a01b03878116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561062c57600080fd5b505af1158015610640573d6000803e3d6000fd5b505050505b60006004878154811061066857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156106ed5783546040516344af0fa760e01b81526001600160a01b038316916344af0fa7916106ba918b9133918c91899190600401611cc2565b600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050505b604051828152879033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a350505050505050565b6000828152600560209081526040808320338452909152812080548282556001820183905560048054929391928690811061077857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156107fd576040516344af0fa760e01b81526001600160a01b038216906344af0fa7906107ca908890339089906000908190600401611cc2565b600060405180830381600087803b1580156107e457600080fd5b505af11580156107f8573d6000803e3d6000fd5b505050505b6108238483600388815481106104cf57634e487b7160e01b600052603260045260246000fd5b836001600160a01b031685336001600160a01b03167f2cac5e20e1541d836381527a43f651851e302817b71dc8e810284e69210c1c6b8560405161086991815260200190565b60405180910390a45050505050565b61089c60405180606001604052806000815260200160008152602001600081525090565b600282815481106108bd57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201529150421115610ab75760006003838154811061091d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a19190611b75565b90508015610a1a5760008260200151426109bb9190611dc8565b905060006006548460400151600754846109d59190611d6a565b6109df9190611d6a565b6109e99190611d4a565b9050826109fb64e8d4a5100083611d6a565b610a059190611d4a565b84518590610a14908390611d32565b90525050505b4260208301526002805483919085908110610a4557634e487b7160e01b600052603260045260246000fd5b600091825260209182902083516003929092020190815582820151600182015560409283015160029091015583810151845183519182529181018490529182015283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d29060600160405180910390a2505b919050565b60025460005b81811015610ae457610ad381610878565b50610add81611e0b565b9050610ac2565b5050565b610af0611745565b670de0b6b3a7640000811115610b735760405162461bcd60e51b815260206004820152603a60248201527f576f6e64657266756c436865663a3a7365745265776172645065725365636f6e60448201527f643a203e204d41585f5245574152445f5045525f5345434f4e4400000000000060648201526084015b60405180910390fd5b610b7b610abc565b60078190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b610bbe611745565b610bc8600061179f565b565b60038181548110610bda57600080fd5b6000918252602090912001546001600160a01b0316905081565b610bfc611745565b610c04610abc565b8260028581548110610c2657634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020154600654610c459190611dc8565b610c4f9190611d32565b6006819055508260028581548110610c7757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201819055508015610ce3578160048581548110610cb457634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80610d235760048481548110610d0957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316610d25565b815b6001600160a01b0316847f95895a6ab1df54420d241b55243258a33e61b2194db66c1179ec521aae8e18658584604051610d6b9291909182521515602082015260400190565b60405180910390a350505050565b6000610d8484610878565b60008581526005602090815260408083206001600160a01b0387168452909152812080549293509185918391610dbb908490611d32565b9091555050815164e8d4a5100090610dd39086611d6a565b610ddd9190611d4a565b816001016000828254610df09190611cf1565b92505081905550600060048681548110610e1a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690508015610ea05781546040516344af0fa760e01b81526001600160a01b038316916344af0fa791610e6d918a918991829160009190600401611cc2565b600060405180830381600087803b158015610e8757600080fd5b505af1158015610e9b573d6000803e3d6000fd5b505050505b610ee433308760038a81548110610ec757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169291906117ef565b836001600160a01b031686336001600160a01b03167f02d7e648dd130fc184d383e55bb126ac4c9c60e8f94bf05acdf557ba2d540b478860405161053191815260200190565b60008060028481548110610f4e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320604080516060810182526003948502909201805483526001810154838501526002015482820152888552600583528085206001600160a01b03891686529092529083208151835492955090939092909188908110610fc657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561101257600080fd5b505afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190611b75565b905083602001514211801561105e57508015155b156110ce5760008460200151426110759190611dc8565b9050600060065486604001516007548461108f9190611d6a565b6110999190611d6a565b6110a39190611d4a565b9050826110b564e8d4a5100083611d6a565b6110bf9190611d4a565b6110c99085611d32565b935050505b6001830154835464e8d4a51000906110e7908590611d6a565b6110f19190611d4a565b6110fb9190611d89565b979650505050505050565b6001546001600160a01b0316156111855760405162461bcd60e51b815260206004820152603c60248201527f576f6e64657266756c436865663a3a7365745265776172644d696e7465723a2060448201527f43616e6e6f74207265646566696e65207265776172644d696e746572000000006064820152608401610b6a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6111af611745565b6111b88261182d565b6111c0610abc565b82600660008282546111d29190611d32565b909155505060038054600181810183557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180546001600160a01b038087166001600160a01b031992831617909255600480548085019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054928616929091169190911790556040805160608101825260008082524260208301908152928201888152600280549586018155918290529151939094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81019390935590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad09091015554601810156113615760405162461bcd60e51b815260206004820152602660248201527f576f6e64657266756c436865663a3a6164643a203e204d41585f4e554d5f4f466044820152655f504f4f4c5360d01b6064820152608401610b6a565b806001600160a01b0316826001600160a01b031660016003805490506113879190611dc8565b6040518681527f81ee0f8c5c46e2cb41984886f77a84181724abb86c32a5f6de539b07509d45e59060200160405180910390a4505050565b60048181548110610bda57600080fd5b60006113da84610878565b6000858152600560209081526040808320338452909152812082518154939450909264e8d4a510009161140c91611d6a565b6114169190611d4a565b9050600082600101548261142a9190611d89565b845190915064e8d4a51000906114409088611d6a565b61144a9190611d4a565b6114549083611d89565b600184015582548690849060009061146d908490611dc8565b909155505080156114df576001546040516340c10f1960e01b81526001600160a01b03878116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b1580156114c657600080fd5b505af11580156114da573d6000803e3d6000fd5b505050505b60006004888154811061150257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156115875783546040516344af0fa760e01b81526001600160a01b038316916344af0fa791611554918c9133918c91899190600401611cc2565b600060405180830381600087803b15801561156e57600080fd5b505af1158015611582573d6000803e3d6000fd5b505050505b6115ad868860038b815481106104cf57634e487b7160e01b600052603260045260246000fd5b856001600160a01b031688336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328a6040516115f391815260200190565b60405180910390a4604051828152889033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a35050505050505050565b611644611745565b6001600160a01b0381166116a95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b6a565b6116b28161179f565b50565b60025460005b818110156116dd576116cd8184610574565b6116d681611e0b565b90506116bb565b505050565b6040516001600160a01b0383166024820152604481018290526116dd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118cf565b6000546001600160a01b03163314610bc85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526118279085906323b872dd60e01b9060840161170e565b50505050565b60025460005b818110156116dd57826001600160a01b03166003828154811061186657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156118bf5760405162461bcd60e51b81526020600482015260136024820152726164643a206578697374696e6720706f6f6c3f60681b6044820152606401610b6a565b6118c881611e0b565b9050611833565b6000611924826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119a19092919063ffffffff16565b8051909150156116dd57808060200190518101906119429190611b41565b6116dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b6a565b60606119b084846000856119b8565b949350505050565b606082471015611a195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b6a565b600080866001600160a01b03168587604051611a359190611c73565b60006040518083038185875af1925050503d8060008114611a72576040519150601f19603f3d011682016040523d82523d6000602084013e611a77565b606091505b50915091506110fb8783838760608315611aef578251611ae8576001600160a01b0385163b611ae85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b6a565b50816119b0565b6119b08383815115611b045781518083602001fd5b8060405162461bcd60e51b8152600401610b6a9190611c8f565b600060208284031215611b2f578081fd5b8135611b3a81611e3c565b9392505050565b600060208284031215611b52578081fd5b8151611b3a81611e51565b600060208284031215611b6e578081fd5b5035919050565b600060208284031215611b86578081fd5b5051919050565b60008060408385031215611b9f578081fd5b823591506020830135611bb181611e3c565b809150509250929050565b600080600060608486031215611bd0578081fd5b833592506020840135611be281611e3c565b91506040840135611bf281611e3c565b809150509250925092565b600080600060608486031215611c11578283fd5b83359250602084013591506040840135611bf281611e3c565b60008060008060808587031215611c3f578081fd5b84359350602085013592506040850135611c5881611e3c565b91506060850135611c6881611e51565b939692955090935050565b60008251611c85818460208701611ddf565b9190910192915050565b6020815260008251806020840152611cae816040850160208701611ddf565b601f01601f19169190910160400192915050565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b600080821280156001600160ff1b0384900385131615611d1357611d13611e26565b600160ff1b8390038412811615611d2c57611d2c611e26565b50500190565b60008219821115611d4557611d45611e26565b500190565b600082611d6557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611d8457611d84611e26565b500290565b60008083128015600160ff1b850184121615611da757611da7611e26565b6001600160ff1b0384018313811615611dc257611dc2611e26565b50500390565b600082821015611dda57611dda611e26565b500390565b60005b83811015611dfa578181015183820152602001611de2565b838111156118275750506000910152565b6000600019821415611e1f57611e1f611e26565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146116b257600080fd5b80151581146116b257600080fdfea2646970667358221220a45779f144e76bc21cc2d197a59570c017ed5d138c1892cabd5ed3803d7dab4a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063a7a0b84a1161007c578063a7a0b84a14610316578063ab7de09814610329578063c346253d1461033c578063d1abb9071461034f578063f2fde38b14610362578063fbe6cf6a1461037557600080fd5b80638da5cb5b1461027c5780638dbdbe6d1461028d5780638f10369a146102a057806393f1a40b146102a957806398969e82146102f05780639b8e55631461030357600080fd5b806351eb05a61161011557806351eb05a6146101e6578063630b5ba11461021b57806366da581514610223578063715018a61461023657806378ed5d1f1461023e57806388bba42f1461026957600080fd5b8063081e3eda1461015d5780630ad58d2f146101745780631526fe271461018957806317caf6f1146101b757806318fccc76146101c05780632f940c70146101d3575b600080fd5b6002545b6040519081526020015b60405180910390f35b610187610182366004611bfd565b610388565b005b61019c610197366004611b5d565b610541565b6040805193845260208401929092529082015260600161016b565b61016160065481565b6101876101ce366004611b8d565b610574565b6101876101e1366004611b8d565b61072d565b6101f96101f4366004611b5d565b610878565b604080518251815260208084015190820152918101519082015260600161016b565b610187610abc565b610187610231366004611b5d565b610ae8565b610187610bb6565b61025161024c366004611b5d565b610bca565b6040516001600160a01b03909116815260200161016b565b610187610277366004611c2a565b610bf4565b6000546001600160a01b0316610251565b61018761029b366004611bfd565b610d79565b61016160075481565b6102db6102b7366004611b8d565b60056020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161016b565b6101616102fe366004611b8d565b610f2a565b600154610251906001600160a01b031681565b610187610324366004611b1e565b611106565b610187610337366004611bbc565b6111a7565b61025161034a366004611b5d565b6113bf565b61018761035d366004611bfd565b6113cf565b610187610370366004611b1e565b61163c565b610187610383366004611b1e565b6116b5565b600061039384610878565b6000858152600560209081526040808320338452909152902081519192509064e8d4a51000906103c39086611d6a565b6103cd9190611d4a565b8160010160008282546103e09190611d89565b90915550508054849082906000906103f9908490611dc8565b9250508190555060006004868154811061042357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156104a95781546040516344af0fa760e01b81526001600160a01b038316916344af0fa791610476918a9133918a9160009190600401611cc2565b600060405180830381600087803b15801561049057600080fd5b505af11580156104a4573d6000803e3d6000fd5b505050505b6104eb8486600389815481106104cf57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691906116e2565b836001600160a01b031686336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328860405161053191815260200190565b60405180910390a4505050505050565b6002818154811061055157600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b600061057f83610878565b6000848152600560209081526040808320338452909152812082518154939450909264e8d4a51000916105b191611d6a565b6105bb9190611d4a565b905060008260010154826105cf9190611d89565b6001840183905590508015610645576001546040516340c10f1960e01b81526001600160a01b03878116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561062c57600080fd5b505af1158015610640573d6000803e3d6000fd5b505050505b60006004878154811061066857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156106ed5783546040516344af0fa760e01b81526001600160a01b038316916344af0fa7916106ba918b9133918c91899190600401611cc2565b600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050505b604051828152879033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a350505050505050565b6000828152600560209081526040808320338452909152812080548282556001820183905560048054929391928690811061077857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156107fd576040516344af0fa760e01b81526001600160a01b038216906344af0fa7906107ca908890339089906000908190600401611cc2565b600060405180830381600087803b1580156107e457600080fd5b505af11580156107f8573d6000803e3d6000fd5b505050505b6108238483600388815481106104cf57634e487b7160e01b600052603260045260246000fd5b836001600160a01b031685336001600160a01b03167f2cac5e20e1541d836381527a43f651851e302817b71dc8e810284e69210c1c6b8560405161086991815260200190565b60405180910390a45050505050565b61089c60405180606001604052806000815260200160008152602001600081525090565b600282815481106108bd57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201529150421115610ab75760006003838154811061091d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a19190611b75565b90508015610a1a5760008260200151426109bb9190611dc8565b905060006006548460400151600754846109d59190611d6a565b6109df9190611d6a565b6109e99190611d4a565b9050826109fb64e8d4a5100083611d6a565b610a059190611d4a565b84518590610a14908390611d32565b90525050505b4260208301526002805483919085908110610a4557634e487b7160e01b600052603260045260246000fd5b600091825260209182902083516003929092020190815582820151600182015560409283015160029091015583810151845183519182529181018490529182015283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d29060600160405180910390a2505b919050565b60025460005b81811015610ae457610ad381610878565b50610add81611e0b565b9050610ac2565b5050565b610af0611745565b670de0b6b3a7640000811115610b735760405162461bcd60e51b815260206004820152603a60248201527f576f6e64657266756c436865663a3a7365745265776172645065725365636f6e60448201527f643a203e204d41585f5245574152445f5045525f5345434f4e4400000000000060648201526084015b60405180910390fd5b610b7b610abc565b60078190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b610bbe611745565b610bc8600061179f565b565b60038181548110610bda57600080fd5b6000918252602090912001546001600160a01b0316905081565b610bfc611745565b610c04610abc565b8260028581548110610c2657634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020154600654610c459190611dc8565b610c4f9190611d32565b6006819055508260028581548110610c7757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201819055508015610ce3578160048581548110610cb457634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80610d235760048481548110610d0957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316610d25565b815b6001600160a01b0316847f95895a6ab1df54420d241b55243258a33e61b2194db66c1179ec521aae8e18658584604051610d6b9291909182521515602082015260400190565b60405180910390a350505050565b6000610d8484610878565b60008581526005602090815260408083206001600160a01b0387168452909152812080549293509185918391610dbb908490611d32565b9091555050815164e8d4a5100090610dd39086611d6a565b610ddd9190611d4a565b816001016000828254610df09190611cf1565b92505081905550600060048681548110610e1a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690508015610ea05781546040516344af0fa760e01b81526001600160a01b038316916344af0fa791610e6d918a918991829160009190600401611cc2565b600060405180830381600087803b158015610e8757600080fd5b505af1158015610e9b573d6000803e3d6000fd5b505050505b610ee433308760038a81548110610ec757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169291906117ef565b836001600160a01b031686336001600160a01b03167f02d7e648dd130fc184d383e55bb126ac4c9c60e8f94bf05acdf557ba2d540b478860405161053191815260200190565b60008060028481548110610f4e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320604080516060810182526003948502909201805483526001810154838501526002015482820152888552600583528085206001600160a01b03891686529092529083208151835492955090939092909188908110610fc657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561101257600080fd5b505afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190611b75565b905083602001514211801561105e57508015155b156110ce5760008460200151426110759190611dc8565b9050600060065486604001516007548461108f9190611d6a565b6110999190611d6a565b6110a39190611d4a565b9050826110b564e8d4a5100083611d6a565b6110bf9190611d4a565b6110c99085611d32565b935050505b6001830154835464e8d4a51000906110e7908590611d6a565b6110f19190611d4a565b6110fb9190611d89565b979650505050505050565b6001546001600160a01b0316156111855760405162461bcd60e51b815260206004820152603c60248201527f576f6e64657266756c436865663a3a7365745265776172644d696e7465723a2060448201527f43616e6e6f74207265646566696e65207265776172644d696e746572000000006064820152608401610b6a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6111af611745565b6111b88261182d565b6111c0610abc565b82600660008282546111d29190611d32565b909155505060038054600181810183557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180546001600160a01b038087166001600160a01b031992831617909255600480548085019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054928616929091169190911790556040805160608101825260008082524260208301908152928201888152600280549586018155918290529151939094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81019390935590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad09091015554601810156113615760405162461bcd60e51b815260206004820152602660248201527f576f6e64657266756c436865663a3a6164643a203e204d41585f4e554d5f4f466044820152655f504f4f4c5360d01b6064820152608401610b6a565b806001600160a01b0316826001600160a01b031660016003805490506113879190611dc8565b6040518681527f81ee0f8c5c46e2cb41984886f77a84181724abb86c32a5f6de539b07509d45e59060200160405180910390a4505050565b60048181548110610bda57600080fd5b60006113da84610878565b6000858152600560209081526040808320338452909152812082518154939450909264e8d4a510009161140c91611d6a565b6114169190611d4a565b9050600082600101548261142a9190611d89565b845190915064e8d4a51000906114409088611d6a565b61144a9190611d4a565b6114549083611d89565b600184015582548690849060009061146d908490611dc8565b909155505080156114df576001546040516340c10f1960e01b81526001600160a01b03878116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b1580156114c657600080fd5b505af11580156114da573d6000803e3d6000fd5b505050505b60006004888154811061150257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156115875783546040516344af0fa760e01b81526001600160a01b038316916344af0fa791611554918c9133918c91899190600401611cc2565b600060405180830381600087803b15801561156e57600080fd5b505af1158015611582573d6000803e3d6000fd5b505050505b6115ad868860038b815481106104cf57634e487b7160e01b600052603260045260246000fd5b856001600160a01b031688336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328a6040516115f391815260200190565b60405180910390a4604051828152889033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a35050505050505050565b611644611745565b6001600160a01b0381166116a95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b6a565b6116b28161179f565b50565b60025460005b818110156116dd576116cd8184610574565b6116d681611e0b565b90506116bb565b505050565b6040516001600160a01b0383166024820152604481018290526116dd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118cf565b6000546001600160a01b03163314610bc85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526118279085906323b872dd60e01b9060840161170e565b50505050565b60025460005b818110156116dd57826001600160a01b03166003828154811061186657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156118bf5760405162461bcd60e51b81526020600482015260136024820152726164643a206578697374696e6720706f6f6c3f60681b6044820152606401610b6a565b6118c881611e0b565b9050611833565b6000611924826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119a19092919063ffffffff16565b8051909150156116dd57808060200190518101906119429190611b41565b6116dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b6a565b60606119b084846000856119b8565b949350505050565b606082471015611a195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b6a565b600080866001600160a01b03168587604051611a359190611c73565b60006040518083038185875af1925050503d8060008114611a72576040519150601f19603f3d011682016040523d82523d6000602084013e611a77565b606091505b50915091506110fb8783838760608315611aef578251611ae8576001600160a01b0385163b611ae85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b6a565b50816119b0565b6119b08383815115611b045781518083602001fd5b8060405162461bcd60e51b8152600401610b6a9190611c8f565b600060208284031215611b2f578081fd5b8135611b3a81611e3c565b9392505050565b600060208284031215611b52578081fd5b8151611b3a81611e51565b600060208284031215611b6e578081fd5b5035919050565b600060208284031215611b86578081fd5b5051919050565b60008060408385031215611b9f578081fd5b823591506020830135611bb181611e3c565b809150509250929050565b600080600060608486031215611bd0578081fd5b833592506020840135611be281611e3c565b91506040840135611bf281611e3c565b809150509250925092565b600080600060608486031215611c11578283fd5b83359250602084013591506040840135611bf281611e3c565b60008060008060808587031215611c3f578081fd5b84359350602085013592506040850135611c5881611e3c565b91506060850135611c6881611e51565b939692955090935050565b60008251611c85818460208701611ddf565b9190910192915050565b6020815260008251806020840152611cae816040850160208701611ddf565b601f01601f19169190910160400192915050565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b600080821280156001600160ff1b0384900385131615611d1357611d13611e26565b600160ff1b8390038412811615611d2c57611d2c611e26565b50500190565b60008219821115611d4557611d45611e26565b500190565b600082611d6557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611d8457611d84611e26565b500290565b60008083128015600160ff1b850184121615611da757611da7611e26565b6001600160ff1b0384018313811615611dc257611dc2611e26565b50500390565b600082821015611dda57611dda611e26565b500390565b60005b83811015611dfa578181015183820152602001611de2565b838111156118275750506000910152565b6000600019821415611e1f57611e1f611e26565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146116b257600080fd5b80151581146116b257600080fdfea2646970667358221220a45779f144e76bc21cc2d197a59570c017ed5d138c1892cabd5ed3803d7dab4a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,address,address)": {
        "params": {
          "_lpToken": "Address of the LP ERC-20 token.",
          "_rewarder": "Address of the rewarder delegate.",
          "allocPoint": "AP of the new pool."
        }
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "amount": "LP token amount to deposit.",
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "The receiver of `amount` deposit benefit."
        }
      },
      "emergencyWithdraw(uint256,address)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of the LP tokens."
        }
      },
      "harvest(uint256,address)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of rewards."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingReward(uint256,address)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`.",
          "_user": "Address of user."
        },
        "returns": {
          "pending": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "set(uint256,uint256,address,bool)": {
        "params": {
          "_allocPoint": "New AP of the pool.",
          "_pid": "The index of the pool. See `poolInfo`.",
          "_rewarder": "Address of the rewarder delegate.",
          "overwrite": "True if _rewarder should be `set`. Otherwise `_rewarder` is ignored."
        }
      },
      "setRewardMinter(address)": {
        "params": {
          "_rewardMinter": "Address of MultiFeeDistribution contract"
        }
      },
      "setRewardPerSecond(uint256)": {
        "params": {
          "_rewardPerSecond": "The amount of reward to be distributed per second."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      },
      "withdraw(uint256,uint256,address)": {
        "params": {
          "amount": "LP token amount to withdraw.",
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of the LP tokens."
        }
      },
      "withdrawAndHarvest(uint256,uint256,address)": {
        "params": {
          "amount": "LP token amount to withdraw.",
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of the LP tokens and rewards."
        }
      }
    },
    "stateVariables": {
      "totalAllocPoint": {
        "details": "Total allocation points. Must be the sum of all allocation points in all pools."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(uint256,address,address)": {
        "notice": "Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
      },
      "deposit(uint256,uint256,address)": {
        "notice": "Deposit LP tokens to MCV2 for reward allocation."
      },
      "emergencyWithdraw(uint256,address)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "harvest(uint256,address)": {
        "notice": "Harvest proceeds for transaction sender to `to`."
      },
      "lpToken(uint256)": {
        "notice": "Address of the LP token for each MCV2 pool."
      },
      "massUpdatePools()": {
        "notice": "Update reward variables for all pools. Be careful of gas spending!"
      },
      "pendingReward(uint256,address)": {
        "notice": "View function to see pending reward on frontend."
      },
      "poolInfo(uint256)": {
        "notice": "Info of each MCV2 pool."
      },
      "poolLength()": {
        "notice": "Returns the number of MCV2 pools."
      },
      "rewarder(uint256)": {
        "notice": "Address of each `IRewarder` contract in MCV2."
      },
      "set(uint256,uint256,address,bool)": {
        "notice": "Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner."
      },
      "setRewardMinter(address)": {
        "notice": "Set the address of rewardMinter.  Can only be called ONCE by the owner."
      },
      "setRewardPerSecond(uint256)": {
        "notice": "Sets the reward per second to be distributed. Can only be called by the owner."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes LP tokens."
      },
      "withdraw(uint256,uint256,address)": {
        "notice": "Withdraw LP tokens from MCV2."
      },
      "withdrawAndHarvest(uint256,uint256,address)": {
        "notice": "Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6175,
        "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
        "label": "rewardMinter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IWonderfulStaking)10049"
      },
      {
        "astId": 6180,
        "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(PoolInfo)6172_storage)dyn_storage"
      },
      {
        "astId": 6185,
        "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
        "label": "lpToken",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IERC20)1000)dyn_storage"
      },
      {
        "astId": 6190,
        "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
        "label": "rewarder",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(IRewarder)9980)dyn_storage"
      },
      {
        "astId": 6198,
        "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6165_storage))"
      },
      {
        "astId": 6202,
        "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6204,
        "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
        "label": "rewardPerSecond",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)1000)dyn_storage": {
        "base": "t_contract(IERC20)1000",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IRewarder)9980)dyn_storage": {
        "base": "t_contract(IRewarder)9980",
        "encoding": "dynamic_array",
        "label": "contract IRewarder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)6172_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6172_storage",
        "encoding": "dynamic_array",
        "label": "struct WonderfulChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1000": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)9980": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(IWonderfulStaking)10049": {
        "encoding": "inplace",
        "label": "contract IWonderfulStaking",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)6165_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WonderfulChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6165_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6165_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct WonderfulChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6165_storage)"
      },
      "t_struct(PoolInfo)6172_storage": {
        "encoding": "inplace",
        "label": "struct WonderfulChef.PoolInfo",
        "members": [
          {
            "astId": 6167,
            "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6169,
            "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6171,
            "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)6165_storage": {
        "encoding": "inplace",
        "label": "struct WonderfulChef.UserInfo",
        "members": [
          {
            "astId": 6162,
            "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6164,
            "contract": "contracts/farms/WonderfulChef.sol:WonderfulChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}