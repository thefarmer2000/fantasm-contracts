{
  "address": "0x8f9Ec4D70caFC6A57FdffcCd88A37Da12b968da1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yTokenReserve",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newCR",
          "type": "uint256"
        }
      ],
      "name": "ArberBuybackRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_xTokenMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_wethGained",
          "type": "uint256"
        }
      ],
      "name": "ArberMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_mintingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redemptionFee",
          "type": "uint256"
        }
      ],
      "name": "FeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "MinCollateralRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ratioStepUp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ratioStepDown",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_priceBand",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_refreshCooldown",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralRatioOptions",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_cr",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralRatioSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Recollateralized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yTokenOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "SwapStrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_mintPaused",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_redeemPaused",
          "type": "bool"
        }
      ],
      "name": "Toggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "TreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_collateralRatioPaused",
          "type": "bool"
        }
      ],
      "name": "UpdateCollateralRatioPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "YTokenSlippageSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINTING_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_arber",
          "type": "address"
        }
      ],
      "name": "approveArber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wethBorrow",
          "type": "uint256"
        }
      ],
      "name": "arberBuybackRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_xTokenIn",
          "type": "uint256"
        }
      ],
      "name": "arberCalcRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_ethOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yTokenOutSpot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_requiredEthBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_xTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "arberMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "arberWithdrawExcessCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "arbers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcExcessCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_exceeded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethIn",
          "type": "uint256"
        }
      ],
      "name": "calcMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_xTokenOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yTokenOutTwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethSwapIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_xTokenIn",
          "type": "uint256"
        }
      ],
      "name": "calcRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_ethOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yTokenOutSpot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yTokenOutTwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_requiredEthBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatioPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getXSupplyAndUnclaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastRefreshCrTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_redemptionFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_mintingPaused",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_redemptionPaused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_collateralBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRefreshCrTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minXTokenOut",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceBand",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratioStepDown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratioStepUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recollateralize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_xTokenIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minYTokenOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minEthOut",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "reduceExcessCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_arber",
          "type": "address"
        }
      ],
      "name": "revokeArber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratioStepUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ratioStepDown",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceBand",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refreshCooldown",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRatioOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_redemptionFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setMinCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapV2Router02",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapStrategy",
          "name": "_swapStrategy",
          "type": "address"
        }
      ],
      "name": "setSwapStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_wethXTokenPath",
          "type": "address[]"
        }
      ],
      "name": "setWethXTokenPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_xTokenWethPath",
          "type": "address[]"
        }
      ],
      "name": "setXTokenWethPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "setYTokenSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_yTokenWethPath",
          "type": "address[]"
        }
      ],
      "name": "setYTokenWethPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapStrategy",
      "outputs": [
        {
          "internalType": "contract ISwapStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_mintPaused",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_redeemPaused",
          "type": "bool"
        }
      ],
      "name": "toggle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_collateralRatioPaused",
          "type": "bool"
        }
      ],
      "name": "toggleCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedXToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedYToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router02",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usableCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastAction",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wethXTokenPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xToken",
      "outputs": [
        {
          "internalType": "contract IXToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "xTokenWethPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yToken",
      "outputs": [
        {
          "internalType": "contract IYToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yTokenReserve",
      "outputs": [
        {
          "internalType": "contract IYTokenReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yTokenSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "yTokenWethPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x35e42ed50da774ce3ebb3e68f9c96e51547c1422fd80649b381cb86832f3b8c5",
  "receipt": {
    "to": null,
    "from": "0x92F56Ca0820ad4eBA8C98a586a46b348BbFc80fe",
    "contractAddress": "0x8f9Ec4D70caFC6A57FdffcCd88A37Da12b968da1",
    "transactionIndex": 14,
    "gasUsed": "4082754",
    "logsBloom": "0x
    "blockHash": "0x803dc216ffce9846d5e3c4500dd03517e1d3fc2d947c5df73601d4d2c8c2f91f",
    "transactionHash": "0x35e42ed50da774ce3ebb3e68f9c96e51547c1422fd80649b381cb86832f3b8c5",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 8430484,
        "transactionHash": "0x35e42ed50da774ce3ebb3e68f9c96e51547c1422fd80649b381cb86832f3b8c5",
        "address": "0x8f9Ec4D70caFC6A57FdffcCd88A37Da12b968da1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092f56ca0820ad4eba8c98a586a46b348bbfc80fe"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x803dc216ffce9846d5e3c4500dd03517e1d3fc2d947c5df73601d4d2c8c2f91f"
      }
    ],
    "blockNumber": 8430484,
    "cumulativeGasUsed": "7234241",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd1bF41957bcdfDc685d6C070f1FfDF5d93A3F2e0",
    "0xf43c355Da992c5dA1E19a37B4FeC09215D20bEC2",
    "0x6be0bEbaDa3A85C5D4B3af1D364878fd094e7c60"
  ],
  "numDeployments": 1,
  "solcInputHash": "131d9b2a84d6bd2fe25b6ae0a79fc8a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yTokenReserve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCR\",\"type\":\"uint256\"}],\"name\":\"ArberBuybackRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wethGained\",\"type\":\"uint256\"}],\"name\":\"ArberMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"MinCollateralRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ratioStepUp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ratioStepDown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceBand\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refreshCooldown\",\"type\":\"uint256\"}],\"name\":\"NewCollateralRatioOptions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cr\",\"type\":\"uint256\"}],\"name\":\"NewCollateralRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Recollateralized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"SwapStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_mintPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_redeemPaused\",\"type\":\"bool\"}],\"name\":\"Toggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_collateralRatioPaused\",\"type\":\"bool\"}],\"name\":\"UpdateCollateralRatioPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"YTokenSlippageSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTING_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arber\",\"type\":\"address\"}],\"name\":\"approveArber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethBorrow\",\"type\":\"uint256\"}],\"name\":\"arberBuybackRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenIn\",\"type\":\"uint256\"}],\"name\":\"arberCalcRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yTokenOutSpot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredEthBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenAmount\",\"type\":\"uint256\"}],\"name\":\"arberMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"arberWithdrawExcessCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"arbers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcExcessCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_exceeded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethIn\",\"type\":\"uint256\"}],\"name\":\"calcMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yTokenOutTwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethSwapIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenIn\",\"type\":\"uint256\"}],\"name\":\"calcRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yTokenOutSpot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yTokenOutTwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredEthBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatioPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXSupplyAndUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastRefreshCrTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_mintingPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_redemptionPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_collateralBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRefreshCrTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minXTokenOut\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceBand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioStepDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioStepUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recollateralize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minYTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEthOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reduceExcessCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arber\",\"type\":\"address\"}],\"name\":\"revokeArber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioStepUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratioStepDown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceBand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refreshCooldown\",\"type\":\"uint256\"}],\"name\":\"setCollateralRatioOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router02\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapStrategy\",\"name\":\"_swapStrategy\",\"type\":\"address\"}],\"name\":\"setSwapStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wethXTokenPath\",\"type\":\"address[]\"}],\"name\":\"setWethXTokenPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_xTokenWethPath\",\"type\":\"address[]\"}],\"name\":\"setXTokenWethPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setYTokenSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_yTokenWethPath\",\"type\":\"address[]\"}],\"name\":\"setYTokenWethPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStrategy\",\"outputs\":[{\"internalType\":\"contract ISwapStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mintPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_redeemPaused\",\"type\":\"bool\"}],\"name\":\"toggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_collateralRatioPaused\",\"type\":\"bool\"}],\"name\":\"toggleCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedYToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router02\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usableCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAction\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wethXTokenPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xToken\",\"outputs\":[{\"internalType\":\"contract IXToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xTokenWethPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yToken\",\"outputs\":[{\"internalType\":\"contract IYToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yTokenReserve\",\"outputs\":[{\"internalType\":\"contract IYTokenReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yTokenSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yTokenWethPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"arberCalcRedeem(uint256)\":{\"params\":{\"_xTokenIn\":\"Amount of XToken input.\"},\"returns\":{\"_ethOut\":\": the amount of Eth output\",\"_requiredEthBalance\":\": required Eth balance in the pool\",\"_yTokenOutSpot\":\": the amount of YToken output based on Spot price\"}},\"arberMint(uint256)\":{\"params\":{\"_xTokenAmount\":\"amount of xTokens to mint and sell\"}},\"arberWithdrawExcessCollateral(uint256)\":{\"params\":{\"_amount\":\"amount of WETH to reduce\"}},\"calcMint(uint256)\":{\"params\":{\"_ethIn\":\"Amount of Collateral token input.\"},\"returns\":{\"_ethFee\":\": the fee amount in Collateral token.\",\"_ethSwapIn\":\": the amount of Collateral token to swap\",\"_xTokenOut\":\": the amount of XToken output.\",\"_yTokenOutTwap\":\": the amount of YToken output by swapping based on Twap price\"}},\"calcRedeem(uint256)\":{\"params\":{\"_xTokenIn\":\"Amount of XToken input.\"},\"returns\":{\"_ethFee\":\": the fee amount in Eth\",\"_ethOut\":\": the amount of Eth output\",\"_requiredEthBalance\":\": required Eth balance in the pool\",\"_yTokenOutSpot\":\": the amount of YToken output based on Spot prrice\",\"_yTokenOutTwap\":\": the amount of YToken output based on TWAP\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reduceExcessCollateral(uint256)\":{\"params\":{\"_amount\":\"amount of WETH to reduce\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCollateralRatioOptions(uint256,uint256,uint256,uint256)\":{\"params\":{\"_priceBand\":\"The collateral ratio will only be adjusted if current price move out of this band\",\"_ratioStepDown\":\"Step which Collateral Ratio will be decreased each updates\",\"_ratioStepUp\":\"Step which Collateral Ratio will be increased each updates\",\"_refreshCooldown\":\"The minimum delay between each Collateral Ratio updates\"}},\"setFees(uint256,uint256)\":{\"params\":{\"_mintingFee\":\"Minting fee in percentage\",\"_redemptionFee\":\"Redemption fee in percentage\"}},\"setMinCollateralRatio(uint256)\":{\"params\":{\"_minCollateralRatio\":\"value of minimum Collateral Ratio in 1e6 precision\"}},\"setOracle(address)\":{\"params\":{\"_oracle\":\"address of the oracle\"}},\"setSwapStrategy(address)\":{\"params\":{\"_swapStrategy\":\"address of Swapper utils contract\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"address of Treasury contract\"}},\"toggle(bool,bool)\":{\"params\":{\"_mintPaused\":\"Paused or NotPaused Minting\",\"_redeemPaused\":\"Paused or NotPaused Redemption\"}},\"toggleCollateralRatio(bool)\":{\"params\":{\"_collateralRatioPaused\":\"`true` or `false`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"arberCalcRedeem(uint256)\":{\"notice\":\"Calculate the expected results for redemption by approved arber\"},\"arberMint(uint256)\":{\"notice\":\"mint and sell xTokens when over peg, requires that >= 1 WETH per minted xToken is recieved.\"},\"arberWithdrawExcessCollateral(uint256)\":{\"notice\":\"Transfer the excess balance of WETH to arber\"},\"calcExcessCollateralBalance()\":{\"notice\":\"Calculate the excess collateral balance\"},\"calcMint(uint256)\":{\"notice\":\"Calculate the expected results for zap minting\"},\"calcRedeem(uint256)\":{\"notice\":\"Calculate the expected results for redemption\"},\"collect()\":{\"notice\":\"collect all minting and redemption\"},\"recollateralize()\":{\"notice\":\"Function to recollateralize the pool by receiving ETH\"},\"reduceExcessCollateral(uint256)\":{\"notice\":\"Transfer the excess balance of WETH to FeeReserve\"},\"refreshCollateralRatio()\":{\"notice\":\"Update collateral ratio and adjust based on the TWAP price of XToken\"},\"setCollateralRatioOptions(uint256,uint256,uint256,uint256)\":{\"notice\":\"Configure variables related to Collateral Ratio\"},\"setFees(uint256,uint256)\":{\"notice\":\"Set the protocol fees\"},\"setMinCollateralRatio(uint256)\":{\"notice\":\"Set the minimum Collateral Ratio\"},\"setOracle(address)\":{\"notice\":\"Set new oracle address\"},\"setSwapStrategy(address)\":{\"notice\":\"Set the address of Swapper utils\"},\"setTreasury(address)\":{\"notice\":\"Set the address of Treasury\"},\"setYTokenSlippage(uint256)\":{\"notice\":\"Set yTokenSlipage\"},\"toggle(bool,bool)\":{\"notice\":\"Turn on / off minting and redemption\"},\"toggleCollateralRatio(bool)\":{\"notice\":\"Pause or unpause collateral ratio updates\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./interfaces/IXToken.sol\\\";\\r\\nimport \\\"./interfaces/IYToken.sol\\\";\\r\\nimport \\\"./interfaces/IYTokenReserve.sol\\\";\\r\\nimport \\\"./interfaces/IMasterOracle.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\nimport \\\"./interfaces/ISwapStrategy.sol\\\";\\r\\nimport \\\"./libs/WethUtils.sol\\\";\\r\\n\\r\\ncontract Pool is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for ERC20;\\r\\n    using SafeERC20 for IWETH;\\r\\n    using SafeERC20 for IXToken;\\r\\n    using SafeERC20 for IYToken;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 xTokenBalance;\\r\\n        uint256 yTokenBalance;\\r\\n        uint256 ethBalance;\\r\\n        uint256 lastAction;\\r\\n    }\\r\\n\\r\\n    /* ========== ADDRESSES ================ */\\r\\n\\r\\n    IMasterOracle public oracle;\\r\\n    IXToken public xToken;\\r\\n    IYToken public yToken;\\r\\n    IYTokenReserve public yTokenReserve;\\r\\n    ISwapStrategy public swapStrategy;\\r\\n    address public treasury;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    uint256 public unclaimedEth;\\r\\n    uint256 public unclaimedXToken;\\r\\n    uint256 public unclaimedYToken;\\r\\n\\r\\n    // Constants for various precisions\\r\\n    uint256 private constant PRICE_PRECISION = 1e18;\\r\\n    uint256 private constant COLLATERAL_RATIO_MAX = 1e6;\\r\\n    uint256 private constant PRECISION = 1e6;\\r\\n\\r\\n    // AccessControl state variables\\r\\n    bool public mintPaused = false;\\r\\n    bool public redeemPaused = false;\\r\\n\\r\\n    // Collateral ratio\\r\\n    uint256 public collateralRatio = 1e6;\\r\\n    uint256 public lastRefreshCrTimestamp;\\r\\n    uint256 public refreshCooldown = 3600; // = 1 hour\\r\\n    uint256 public ratioStepUp = 2000; // = 0.002 or 0.2% -> ratioStep when CR increase\\r\\n    uint256 public ratioStepDown = 1000; // = 0.001 or 0.1% -> ratioStep when CR decrease\\r\\n    uint256 public priceTarget = 1e18; // = 1; 1 XToken pegged to the value of 1 ETH\\r\\n    uint256 public priceBand = 5e15; // = 0.005; CR will be adjusted if XToken > 1.005 ETH or XToken < 0.995 ETH\\r\\n    uint256 public minCollateralRatio = 1e6;\\r\\n    uint256 public yTokenSlippage = 100000; // 10%\\r\\n    bool public collateralRatioPaused = false;\\r\\n\\r\\n    // fees\\r\\n    uint256 public redemptionFee = 5000; // 6 decimals of precision, .5%\\r\\n    uint256 public constant REDEMPTION_FEE_MAX = 9000; // 0.9%\\r\\n    uint256 public mintingFee = 3000; // 6 decimals of precision, .3%\\r\\n    uint256 public constant MINTING_FEE_MAX = 5000; // 0.5%\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    constructor(\\r\\n        address _xToken,\\r\\n        address _yToken,\\r\\n        address _yTokenReserve\\r\\n    ) {\\r\\n        require(_xToken != address(0), \\\"Pool::initialize: invalidAddress\\\");\\r\\n        require(_yToken != address(0), \\\"Pool::initialize: invalidAddress\\\");\\r\\n        require(_yTokenReserve != address(0), \\\"Pool::initialize: invalidAddress\\\");\\r\\n        xToken = IXToken(_xToken);\\r\\n        xToken.setMinter(address(this));\\r\\n        yToken = IYToken(_yToken);\\r\\n        yTokenReserve = IYTokenReserve(_yTokenReserve);\\r\\n        yTokenReserve.setPool(address(this));\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function info()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _collateralRatio,\\r\\n            uint256 _lastRefreshCrTimestamp,\\r\\n            uint256 _mintingFee,\\r\\n            uint256 _redemptionFee,\\r\\n            bool _mintingPaused,\\r\\n            bool _redemptionPaused,\\r\\n            uint256 _collateralBalance\\r\\n        )\\r\\n    {\\r\\n        _collateralRatio = collateralRatio;\\r\\n        _lastRefreshCrTimestamp = lastRefreshCrTimestamp;\\r\\n        _mintingFee = mintingFee;\\r\\n        _redemptionFee = redemptionFee;\\r\\n        _mintingPaused = mintPaused;\\r\\n        _redemptionPaused = redeemPaused;\\r\\n        _collateralBalance = usableCollateralBalance();\\r\\n    }\\r\\n\\r\\n    function usableCollateralBalance() public view returns (uint256) {\\r\\n        uint256 _balance = WethUtils.weth.balanceOf(address(this));\\r\\n        return _balance > unclaimedEth ? (_balance - unclaimedEth) : 0;\\r\\n    }\\r\\n\\r\\n    function getXSupplyAndUnclaimed() public view returns (uint256) {\\r\\n        return ((xToken.totalSupply()) + (unclaimedXToken));\\r\\n    }\\r\\n\\r\\n    function realCollateralRatio () public view returns (uint256) {\\r\\n        return ((usableCollateralBalance()) * (1000000)) / (getXSupplyAndUnclaimed());\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the expected results for zap minting\\r\\n    /// @param _ethIn Amount of Collateral token input.\\r\\n    /// @return _xTokenOut : the amount of XToken output.\\r\\n    /// @return _yTokenOutTwap : the amount of YToken output by swapping based on Twap price\\r\\n    /// @return _ethFee : the fee amount in Collateral token.\\r\\n    /// @return _ethSwapIn : the amount of Collateral token to swap\\r\\n    function calcMint(uint256 _ethIn)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _xTokenOut,\\r\\n            uint256 _yTokenOutTwap,\\r\\n            uint256 _ethFee,\\r\\n            uint256 _ethSwapIn\\r\\n        )\\r\\n    {\\r\\n        uint256 _yTokenTwap = oracle.getYTokenTWAP();\\r\\n        require(_yTokenTwap > 0, \\\"Pool::calcMint: Invalid YToken price\\\");\\r\\n        _ethSwapIn = (_ethIn * (COLLATERAL_RATIO_MAX - collateralRatio)) / COLLATERAL_RATIO_MAX;\\r\\n        _yTokenOutTwap = (_ethSwapIn * PRICE_PRECISION) / _yTokenTwap;\\r\\n        _ethFee = (_ethIn * mintingFee * collateralRatio) / COLLATERAL_RATIO_MAX / PRECISION;\\r\\n        _xTokenOut = _ethIn - ((_ethIn * mintingFee) / PRECISION);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the expected results for redemption\\r\\n    /// @param _xTokenIn Amount of XToken input.\\r\\n    /// @return _ethOut : the amount of Eth output\\r\\n    /// @return _yTokenOutSpot : the amount of YToken output based on Spot prrice\\r\\n    /// @return _yTokenOutTwap : the amount of YToken output based on TWAP\\r\\n    /// @return _ethFee : the fee amount in Eth\\r\\n    /// @return _requiredEthBalance : required Eth balance in the pool\\r\\n    function calcRedeem(uint256 _xTokenIn)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _ethOut,\\r\\n            uint256 _yTokenOutSpot,\\r\\n            uint256 _yTokenOutTwap,\\r\\n            uint256 _ethFee,\\r\\n            uint256 _requiredEthBalance\\r\\n        )\\r\\n    {\\r\\n        uint256 _yTokenPrice = oracle.getYTokenPrice();\\r\\n        uint256 _yTokenTWAP = oracle.getYTokenTWAP();\\r\\n        require(_yTokenPrice > 0, \\\"Pool::calcRedeem: Invalid YToken price\\\");\\r\\n\\r\\n        _requiredEthBalance = (_xTokenIn * collateralRatio) / PRECISION;\\r\\n        if (collateralRatio < COLLATERAL_RATIO_MAX) {\\r\\n            _yTokenOutSpot = (_xTokenIn * (COLLATERAL_RATIO_MAX - collateralRatio) * (PRECISION - redemptionFee) * PRICE_PRECISION) / COLLATERAL_RATIO_MAX / PRECISION / _yTokenPrice;\\r\\n            _yTokenOutTwap = (_xTokenIn * (COLLATERAL_RATIO_MAX - collateralRatio) * (PRECISION - redemptionFee) * PRICE_PRECISION) / COLLATERAL_RATIO_MAX / PRECISION / _yTokenTWAP;\\r\\n        }\\r\\n\\r\\n        if (collateralRatio > 0) {\\r\\n            _ethOut = (_xTokenIn * collateralRatio * (PRECISION - redemptionFee)) / COLLATERAL_RATIO_MAX / PRECISION;\\r\\n            _ethFee = (_xTokenIn * collateralRatio * redemptionFee) / COLLATERAL_RATIO_MAX / PRECISION;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the excess collateral balance\\r\\n    function calcExcessCollateralBalance() public view returns (uint256 _delta, bool _exceeded) {\\r\\n        uint256 _requiredCollateralBal = (xToken.totalSupply() * collateralRatio) / COLLATERAL_RATIO_MAX;\\r\\n        uint256 _usableCollateralBal = usableCollateralBalance();\\r\\n        if (_usableCollateralBal >= _requiredCollateralBal) {\\r\\n            _delta = _usableCollateralBal - _requiredCollateralBal;\\r\\n            _exceeded = true;\\r\\n        } else {\\r\\n            _delta = _requiredCollateralBal - _usableCollateralBal;\\r\\n            _exceeded = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== PUBLIC FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Update collateral ratio and adjust based on the TWAP price of XToken\\r\\n    function refreshCollateralRatio() public {\\r\\n        require(collateralRatioPaused == false, \\\"Pool::refreshCollateralRatio: Collateral Ratio has been paused\\\");\\r\\n        require(block.timestamp - lastRefreshCrTimestamp >= refreshCooldown, \\\"Pool::refreshCollateralRatio: Must wait for the refresh cooldown since last refresh\\\");\\r\\n\\r\\n        uint256 _xTokenPrice = oracle.getXTokenTWAP();\\r\\n        if (_xTokenPrice > priceTarget + priceBand) {\\r\\n            if (collateralRatio <= ratioStepDown) {\\r\\n                collateralRatio = 0;\\r\\n            } else {\\r\\n                uint256 _newCR = collateralRatio - ratioStepDown;\\r\\n                if (_newCR <= minCollateralRatio) {\\r\\n                    collateralRatio = minCollateralRatio;\\r\\n                } else {\\r\\n                    collateralRatio = _newCR;\\r\\n                }\\r\\n            }\\r\\n        } else if (_xTokenPrice < priceTarget - priceBand) {\\r\\n            if (collateralRatio + ratioStepUp >= COLLATERAL_RATIO_MAX) {\\r\\n                collateralRatio = COLLATERAL_RATIO_MAX;\\r\\n            } else {\\r\\n                collateralRatio = collateralRatio + ratioStepUp;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        lastRefreshCrTimestamp = block.timestamp;\\r\\n        emit NewCollateralRatioSet(collateralRatio);\\r\\n    }\\r\\n\\r\\n    /// @notice fallback for payable -> required to unwrap WETH\\r\\n    receive() external payable {}\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    function mint(uint256 _minXTokenOut) external payable nonReentrant {\\r\\n        require(!mintPaused, \\\"Pool::mint: Minting is paused\\\");\\r\\n        uint256 _ethIn = msg.value;\\r\\n        address _sender = msg.sender;\\r\\n\\r\\n        (uint256 _xTokenOut, uint256 _yTokenOutTwap, uint256 _fee, uint256 _wethSwapIn) = calcMint(_ethIn);\\r\\n        require(_xTokenOut >= _minXTokenOut, \\\"Pool::mint: > slippage\\\");\\r\\n\\r\\n        WethUtils.wrap(_ethIn);\\r\\n        if (_yTokenOutTwap > 0 && _wethSwapIn > 0) {\\r\\n            WethUtils.weth.safeIncreaseAllowance(address(swapStrategy), _wethSwapIn);\\r\\n            swapStrategy.execute(_wethSwapIn, _yTokenOutTwap);\\r\\n        }\\r\\n\\r\\n        if (_xTokenOut > 0) {\\r\\n            userInfo[_sender].xTokenBalance = userInfo[_sender].xTokenBalance + _xTokenOut;\\r\\n            unclaimedXToken = unclaimedXToken + _xTokenOut;\\r\\n        }\\r\\n\\r\\n        transferToTreasury(_fee);\\r\\n\\r\\n        emit Mint(_sender, _xTokenOut, _ethIn, _fee);\\r\\n    }\\r\\n\\r\\n    function redeem(\\r\\n        uint256 _xTokenIn,\\r\\n        uint256 _minYTokenOut,\\r\\n        uint256 _minEthOut\\r\\n    ) external nonReentrant {\\r\\n        require(!redeemPaused, \\\"Pool::redeem: Redeeming is paused\\\");\\r\\n\\r\\n        address _sender = msg.sender;\\r\\n        (uint256 _ethOut, uint256 _yTokenOutSpot, uint256 _yTokenOutTwap, uint256 _fee, uint256 _requiredEthBalance) = calcRedeem(_xTokenIn);\\r\\n\\r\\n        // Check if collateral balance meets and meet output expectation\\r\\n        require(_requiredEthBalance <= usableCollateralBalance(), \\\"Pool::redeem: > ETH balance\\\");\\r\\n\\r\\n        // Prevent price manipulation to get more yToken\\r\\n        checkPriceFluctuation(_yTokenOutSpot, _yTokenOutTwap);\\r\\n\\r\\n        require(_minEthOut <= _ethOut && _minYTokenOut <= _yTokenOutSpot, \\\"Pool::redeem: >slippage\\\");\\r\\n\\r\\n        if (_ethOut > 0) {\\r\\n            userInfo[_sender].ethBalance = userInfo[_sender].ethBalance + _ethOut;\\r\\n            unclaimedEth = unclaimedEth + _ethOut;\\r\\n        }\\r\\n\\r\\n        if (_yTokenOutSpot > 0) {\\r\\n            userInfo[_sender].yTokenBalance = userInfo[_sender].yTokenBalance + _yTokenOutSpot;\\r\\n            unclaimedYToken = unclaimedYToken + _yTokenOutSpot;\\r\\n        }\\r\\n\\r\\n        userInfo[_sender].lastAction = block.number;\\r\\n\\r\\n        // Move all external functions to the end\\r\\n        xToken.burnFrom(_sender, _xTokenIn);\\r\\n        transferToTreasury(_fee);\\r\\n\\r\\n        emit Redeem(_sender, _xTokenIn, _ethOut, _yTokenOutSpot, _fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice collect all minting and redemption\\r\\n     */\\r\\n    function collect() external nonReentrant {\\r\\n        address _sender = msg.sender;\\r\\n        require(userInfo[_sender].lastAction < block.number, \\\"Pool::collect: <minimum_delay\\\");\\r\\n\\r\\n        bool _sendXToken = false;\\r\\n        bool _sendYToken = false;\\r\\n        bool _sendEth = false;\\r\\n        uint256 _xTokenAmount;\\r\\n        uint256 _yTokenAmount;\\r\\n        uint256 _ethAmount;\\r\\n\\r\\n        // Use Checks-Effects-Interactions pattern\\r\\n        if (userInfo[_sender].xTokenBalance > 0) {\\r\\n            _xTokenAmount = userInfo[_sender].xTokenBalance;\\r\\n            userInfo[_sender].xTokenBalance = 0;\\r\\n            unclaimedXToken = unclaimedXToken - _xTokenAmount;\\r\\n            _sendXToken = true;\\r\\n        }\\r\\n\\r\\n        if (userInfo[_sender].yTokenBalance > 0) {\\r\\n            _yTokenAmount = userInfo[_sender].yTokenBalance;\\r\\n            userInfo[_sender].yTokenBalance = 0;\\r\\n            unclaimedYToken = unclaimedYToken - _yTokenAmount;\\r\\n            _sendYToken = true;\\r\\n        }\\r\\n\\r\\n        if (userInfo[_sender].ethBalance > 0) {\\r\\n            _ethAmount = userInfo[_sender].ethBalance;\\r\\n            userInfo[_sender].ethBalance = 0;\\r\\n            unclaimedEth = unclaimedEth - _ethAmount;\\r\\n            _sendEth = true;\\r\\n        }\\r\\n\\r\\n        if (_sendXToken) {\\r\\n            xToken.mint(_sender, _xTokenAmount);\\r\\n        }\\r\\n\\r\\n        if (_sendYToken) {\\r\\n            yTokenReserve.transfer(_sender, _yTokenAmount);\\r\\n        }\\r\\n\\r\\n        if (_sendEth) {\\r\\n            WethUtils.unwrap(_ethAmount);\\r\\n            Address.sendValue(payable(_sender), _ethAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function to recollateralize the pool by receiving ETH\\r\\n    function recollateralize() external payable {\\r\\n        uint256 _amount = msg.value;\\r\\n        require(_amount > 0, \\\"Pool::recollateralize: Invalid amount\\\");\\r\\n        WethUtils.wrap(_amount);\\r\\n        emit Recollateralized(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n     function checkPriceFluctuation(uint256 _yAmountSpotPrice, uint256 _yAmountTwap) internal view {\\r\\n        uint256 _diff;\\r\\n        if (_yAmountSpotPrice > _yAmountTwap) {\\r\\n            _diff = _yAmountSpotPrice - _yAmountTwap;\\r\\n        } else {\\r\\n            _diff = _yAmountTwap - _yAmountSpotPrice;\\r\\n        }\\r\\n        require(_diff <= ((_yAmountTwap * yTokenSlippage) / PRECISION), \\\"Pool::checkPriceFluctuation: > yTokenSlippage\\\");\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Turn on / off minting and redemption\\r\\n    /// @param _mintPaused Paused or NotPaused Minting\\r\\n    /// @param _redeemPaused Paused or NotPaused Redemption\\r\\n    function toggle(bool _mintPaused, bool _redeemPaused) public onlyOwner {\\r\\n        mintPaused = _mintPaused;\\r\\n        redeemPaused = _redeemPaused;\\r\\n        emit Toggled(_mintPaused, _redeemPaused);\\r\\n    }\\r\\n\\r\\n    /// @notice Configure variables related to Collateral Ratio\\r\\n    /// @param _ratioStepUp Step which Collateral Ratio will be increased each updates\\r\\n    /// @param _ratioStepDown Step which Collateral Ratio will be decreased each updates\\r\\n    /// @param _priceBand The collateral ratio will only be adjusted if current price move out of this band\\r\\n    /// @param _refreshCooldown The minimum delay between each Collateral Ratio updates\\r\\n    function setCollateralRatioOptions(\\r\\n        uint256 _ratioStepUp,\\r\\n        uint256 _ratioStepDown,\\r\\n        uint256 _priceBand,\\r\\n        uint256 _refreshCooldown\\r\\n    ) public onlyOwner {\\r\\n        ratioStepUp = _ratioStepUp;\\r\\n        ratioStepDown = _ratioStepDown;\\r\\n        priceBand = _priceBand;\\r\\n        refreshCooldown = _refreshCooldown;\\r\\n        emit NewCollateralRatioOptions(_ratioStepUp, _ratioStepDown, _priceBand, _refreshCooldown);\\r\\n    }\\r\\n\\r\\n    /// @notice Pause or unpause collateral ratio updates\\r\\n    /// @param _collateralRatioPaused `true` or `false`\\r\\n    function toggleCollateralRatio(bool _collateralRatioPaused) public onlyOwner {\\r\\n        if (collateralRatioPaused != _collateralRatioPaused) {\\r\\n            collateralRatioPaused = _collateralRatioPaused;\\r\\n            emit UpdateCollateralRatioPaused(_collateralRatioPaused);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Set the protocol fees\\r\\n    /// @param _mintingFee Minting fee in percentage\\r\\n    /// @param _redemptionFee Redemption fee in percentage\\r\\n    function setFees(uint256 _mintingFee, uint256 _redemptionFee) public onlyOwner {\\r\\n        require(_mintingFee <= MINTING_FEE_MAX, \\\"Pool::setFees:>MINTING_FEE_MAX\\\");\\r\\n        require(_redemptionFee <= REDEMPTION_FEE_MAX, \\\"Pool::setFees:>REDEMPTION_FEE_MAX\\\");\\r\\n        redemptionFee = _redemptionFee;\\r\\n        mintingFee = _mintingFee;\\r\\n        emit FeesUpdated(_mintingFee, _redemptionFee);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the minimum Collateral Ratio\\r\\n    /// @param _minCollateralRatio value of minimum Collateral Ratio in 1e6 precision\\r\\n    function setMinCollateralRatio(uint256 _minCollateralRatio) external onlyOwner {\\r\\n        require(_minCollateralRatio <= COLLATERAL_RATIO_MAX, \\\"Pool::setMinCollateralRatio: >COLLATERAL_RATIO_MAX\\\");\\r\\n        minCollateralRatio = _minCollateralRatio;\\r\\n        emit MinCollateralRatioUpdated(_minCollateralRatio);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer the excess balance of WETH to FeeReserve\\r\\n    /// @param _amount amount of WETH to reduce\\r\\n    function reduceExcessCollateral(uint256 _amount) external onlyOwner {\\r\\n        (uint256 _excessWethBal, bool exceeded) = calcExcessCollateralBalance();\\r\\n        if (exceeded && _excessWethBal > 0) {\\r\\n            require(_amount <= _excessWethBal, \\\"Pool::reduceExcessCollateral: The amount is too large\\\");\\r\\n            transferToTreasury(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Set the address of Swapper utils\\r\\n    /// @param _swapStrategy address of Swapper utils contract\\r\\n    function setSwapStrategy(ISwapStrategy _swapStrategy) external onlyOwner {\\r\\n        require(address(_swapStrategy) != address(0), \\\"Pool::setSwapStrategy: invalid address\\\");\\r\\n        swapStrategy = _swapStrategy;\\r\\n        emit SwapStrategyChanged(address(_swapStrategy));\\r\\n    }\\r\\n\\r\\n    /// @notice Set new oracle address\\r\\n    /// @param _oracle address of the oracle\\r\\n    function setOracle(IMasterOracle _oracle) external onlyOwner {\\r\\n        require(address(_oracle) != address(0), \\\"Pool::setOracle: invalid address\\\");\\r\\n        oracle = _oracle;\\r\\n        emit OracleChanged(address(_oracle));\\r\\n    }\\r\\n\\r\\n    /// @notice Set yTokenSlipage\\r\\n    function setYTokenSlippage(uint256 _slippage) external onlyOwner {\\r\\n        require(_slippage <= 300000, \\\"Pool::setYTokenSlippage: yTokenSlippage cannot be more than 30%\\\");\\r\\n        yTokenSlippage = _slippage;\\r\\n        emit YTokenSlippageSet(_slippage);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the address of Treasury\\r\\n    /// @param _treasury address of Treasury contract\\r\\n    function setTreasury(address _treasury) external {\\r\\n        require(treasury == address(0), \\\"Pool::setTreasury: not allowed\\\");\\r\\n        treasury = _treasury;\\r\\n        emit TreasurySet(_treasury);\\r\\n    }\\r\\n\\r\\n    /// @notice Move weth to treasury\\r\\n    function transferToTreasury(uint256 _amount) internal {\\r\\n        require(treasury != address(0), \\\"Pool::transferToTreasury:Invalid address\\\");\\r\\n        if (_amount > 0) {\\r\\n            WethUtils.weth.safeTransfer(treasury, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Arber only\\r\\n    IUniswapV2Router02 public uniswapV2Router02; \\r\\n    mapping (address => bool) public arbers; \\r\\n    address[] public xTokenWethPath;\\r\\n    address[] public wethXTokenPath;\\r\\n    address[] public yTokenWethPath;\\r\\n\\r\\n    function setRouter (address _uniswapV2Router02) public onlyOwner () {\\r\\n        uniswapV2Router02 = IUniswapV2Router02(_uniswapV2Router02);\\r\\n    }\\r\\n\\r\\n    function approveArber (address _arber) public onlyOwner () {\\r\\n        arbers[_arber] = true;\\r\\n    }\\r\\n\\r\\n    function revokeArber (address _arber) public onlyOwner () {\\r\\n        arbers[_arber] = false;\\r\\n    }\\r\\n\\r\\n    function setXTokenWethPath (address[] memory _xTokenWethPath) public onlyOwner () {\\r\\n        delete xTokenWethPath;\\r\\n        for (uint256 i = 0; i < _xTokenWethPath.length; i++) {\\r\\n            xTokenWethPath.push(_xTokenWethPath[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setWethXTokenPath (address [] memory _wethXTokenPath) public onlyOwner () {\\r\\n        delete wethXTokenPath;\\r\\n        for (uint256 i = 0; i < _wethXTokenPath.length; i++) {\\r\\n            wethXTokenPath.push(_wethXTokenPath[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function setYTokenWethPath (address [] memory _yTokenWethPath) public onlyOwner () {\\r\\n        delete yTokenWethPath;\\r\\n        for (uint256 i = 0; i < _yTokenWethPath.length; i++) {\\r\\n            yTokenWethPath.push(_yTokenWethPath[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyArber () {\\r\\n        require (arbers[msg.sender], \\\"Pool::onlyArber: only approved arber can call this\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    /** @notice Calculate the expected results for redemption by approved arber\\r\\n        @param _xTokenIn Amount of XToken input.\\r\\n        @return _ethOut : the amount of Eth output\\r\\n        @return _yTokenOutSpot : the amount of YToken output based on Spot price\\r\\n        @return _requiredEthBalance : required Eth balance in the pool\\r\\n    */\\r\\n    function arberCalcRedeem(uint256 _xTokenIn)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _ethOut,\\r\\n            uint256 _yTokenOutSpot,\\r\\n            uint256 _requiredEthBalance\\r\\n        )\\r\\n    {\\r\\n        uint256 _yTokenPrice = oracle.getYTokenPrice();\\r\\n        require(_yTokenPrice > 0, \\\"Pool::calcRedeem: Invalid YToken price\\\");\\r\\n        \\r\\n        uint256 _realCollateralRatio = realCollateralRatio();\\r\\n        if (_realCollateralRatio > COLLATERAL_RATIO_MAX) {\\r\\n            _realCollateralRatio = COLLATERAL_RATIO_MAX;\\r\\n        }\\r\\n\\r\\n        _requiredEthBalance = (_xTokenIn * _realCollateralRatio) / PRECISION;\\r\\n        if (_realCollateralRatio < COLLATERAL_RATIO_MAX) { // COLLATERAL_RATIO_MAX == 100%\\r\\n            _yTokenOutSpot = (_xTokenIn * (COLLATERAL_RATIO_MAX - _realCollateralRatio) * (PRECISION) * PRICE_PRECISION) / COLLATERAL_RATIO_MAX / PRECISION / _yTokenPrice;\\r\\n        }\\r\\n\\r\\n        if (_realCollateralRatio > 0) {\\r\\n            _ethOut = (_xTokenIn * _realCollateralRatio * (PRECISION)) / COLLATERAL_RATIO_MAX / PRECISION;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice mint and sell xTokens when over peg, requires that >= 1 WETH per minted xToken is recieved.\\r\\n        @param _xTokenAmount amount of xTokens to mint and sell\\r\\n    */\\r\\n    function arberMint(uint256 _xTokenAmount) external onlyArber {\\r\\n        uint256 _startWethBalance = WethUtils.weth.balanceOf(address(this));\\r\\n        uint256[] memory _amountsOut = uniswapV2Router02.getAmountsOut(_xTokenAmount, xTokenWethPath);\\r\\n        uint256 _ethOut = _amountsOut[_amountsOut.length - 1];\\r\\n        require(_ethOut >= _xTokenAmount, \\\"Pool::arberMint: mint must result in atleast 100% collateralisation of new xTokens\\\");\\r\\n        xToken.mint(address(this), _xTokenAmount);\\r\\n        xToken.safeIncreaseAllowance(address(uniswapV2Router02), _xTokenAmount);\\r\\n        uniswapV2Router02.swapExactTokensForTokens(_xTokenAmount, _ethOut, xTokenWethPath, address(this), block.timestamp);\\r\\n        uint256 _wethGained = (WethUtils.weth.balanceOf(address(this))) - (_startWethBalance);\\r\\n        require (_wethGained >= _ethOut, \\\"Pool::arberMint: mint did not result in 100% collateralization of new xTokens\\\");\\r\\n        emit ArberMint(block.timestamp, _xTokenAmount, _wethGained);\\r\\n    }\\r\\n\\r\\n    function arberBuybackRedeem(uint256 _wethBorrow) external onlyArber {\\r\\n        require(_wethBorrow <= usableCollateralBalance(), \\\"Pool::arberBuyBackRedeem: borrow exceeds weth balance\\\");\\r\\n        uint256 _startWethBalance = usableCollateralBalance();\\r\\n        uint256 _startCR = realCollateralRatio();\\r\\n\\r\\n        uint256[] memory _amountsOut = uniswapV2Router02.getAmountsOut(_wethBorrow, wethXTokenPath);\\r\\n        uint256 _xTokenIn = _amountsOut[_amountsOut.length - 1];\\r\\n        (uint256 _ethOut, uint256 _yTokenOutSpot, uint256 _requiredEthBalance) = arberCalcRedeem(_xTokenIn);\\r\\n        \\r\\n        uint256 _wethRecievedFromYSwap;\\r\\n        if (_yTokenOutSpot > 0) {\\r\\n            _amountsOut = uniswapV2Router02.getAmountsOut(_yTokenOutSpot, yTokenWethPath);\\r\\n            _wethRecievedFromYSwap = _amountsOut[_amountsOut.length - 1];\\r\\n        } else {\\r\\n            _wethRecievedFromYSwap = 0;\\r\\n        }\\r\\n\\r\\n        uint256 _projectedEndWeth = (_startWethBalance - (_wethBorrow)) + (_wethRecievedFromYSwap);\\r\\n        uint256 _projectedEndXSupply = (getXSupplyAndUnclaimed()) - (_xTokenIn);\\r\\n        uint256 _projectedCR = (_projectedEndWeth * (1000000)) / (_projectedEndXSupply);\\r\\n        require(_projectedCR >= _startCR, \\\"Pool::arberBuyBackRedeem: must maintain or improve collateral ratio\\\");\\r\\n\\r\\n        // Move all external functions to the end\\r\\n        WethUtils.weth.safeIncreaseAllowance(address(uniswapV2Router02), _wethBorrow);\\r\\n        uniswapV2Router02.swapExactTokensForTokens(_wethBorrow, _xTokenIn, wethXTokenPath, address(this), block.timestamp);\\r\\n        \\r\\n        xToken.burn(_xTokenIn);\\r\\n        \\r\\n        if (_yTokenOutSpot > 0) {\\r\\n            yTokenReserve.transfer(address(this), _yTokenOutSpot);\\r\\n            yToken.safeIncreaseAllowance(address(uniswapV2Router02), _yTokenOutSpot);\\r\\n            uniswapV2Router02.swapExactTokensForTokens(_yTokenOutSpot, _wethRecievedFromYSwap, yTokenWethPath, address(this), block.timestamp);\\r\\n        }\\r\\n        uint256 _endCR = realCollateralRatio();\\r\\n        require(_endCR >= _startCR, \\\"Pool::arberBuyBackRedeem: did not maintain or improve collateral ratio\\\");\\r\\n        emit ArberBuybackRedeemed(block.timestamp, _endCR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        @notice Transfer the excess balance of WETH to arber\\r\\n        @param _amount amount of WETH to reduce\\r\\n    */\\r\\n    function arberWithdrawExcessCollateral(uint256 _amount) external onlyArber {\\r\\n        (uint256 _excessWethBal, bool exceeded) = calcExcessCollateralBalance();\\r\\n        if (exceeded && _excessWethBal > 0) {\\r\\n            require(_amount <= _excessWethBal, \\\"Pool::arberWithdrawExcessCollateral: The amount exceeds surplus\\\");\\r\\n            WethUtils.transfer(msg.sender, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // EVENTS\\r\\n    event OracleChanged(address indexed _oracle);\\r\\n    event Toggled(bool _mintPaused, bool _redeemPaused);\\r\\n    event Mint(address minter, uint256 amount, uint256 ethIn, uint256 fee);\\r\\n    event Redeem(address redeemer, uint256 amount, uint256 ethOut, uint256 yTokenOut, uint256 fee);\\r\\n    event UpdateCollateralRatioPaused(bool _collateralRatioPaused);\\r\\n    event NewCollateralRatioOptions(uint256 _ratioStepUp, uint256 _ratioStepDown, uint256 _priceBand, uint256 _refreshCooldown);\\r\\n    event MinCollateralRatioUpdated(uint256 _minCollateralRatio);\\r\\n    event NewCollateralRatioSet(uint256 _cr);\\r\\n    event FeesUpdated(uint256 _mintingFee, uint256 _redemptionFee);\\r\\n    event Recollateralized(address indexed _sender, uint256 _amount);\\r\\n    event SwapStrategyChanged(address indexed _swapper);\\r\\n    event TreasurySet(address indexed _treasury);\\r\\n    event YTokenSlippageSet(uint256 _slippage);\\r\\n    event ArberMint(uint256 _timestamp, uint256 _xTokenMinted, uint256 _wethGained);\\r\\n    event ArberBuybackRedeemed(uint256 _timestamp, uint256 _newCR);\\r\\n}\\r\\n\",\"keccak256\":\"0x4940c7df0fbe3b5eac5a8285f0c4a8f05cc789d19b752a1856e8d1326b65d541\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IMasterOracle {\\r\\n    function getXTokenPrice() external view returns (uint256);\\r\\n\\r\\n    function getYTokenPrice() external view returns (uint256);\\r\\n\\r\\n    function getYTokenTWAP() external view returns (uint256);\\r\\n\\r\\n    function getXTokenTWAP() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc1b09cdb30104fc9b8ffe290c48606884f474033d30caa7eec3300c8f58cd09b\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface ISwapStrategy {\\r\\n    function execute(uint256 _wethIn, uint256 _yTokenOut) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x22eca9e6059f82e4d319835890c3c47996b7b96292a3e385d968295bb22c8015\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf98652584ed5134c7f7dd6be73ed0987cc812ea8f0ffde7ad9267d682959be56\",\"license\":\"MIT\"},\"contracts/interfaces/IXToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IXToken is IERC20 {\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 _amount) external;\\r\\n\\r\\n    function mint(address _address, uint256 _amount) external;\\r\\n\\r\\n    function setMinter(address _minter) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5ed80e8841a1d9c07d74a33cd70159870828f2f16340a6a3dfd35972d8e32459\",\"license\":\"MIT\"},\"contracts/interfaces/IYToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IYToken is IERC20 {\\r\\n    function burn(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xcf536e2b997d94442ec7d06cf1acab95b2e55612c42837df71179aba0726cf74\",\"license\":\"MIT\"},\"contracts/interfaces/IYTokenReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IYTokenReserve {\\r\\n    function transfer(address _address, uint256 _amount) external;\\r\\n\\r\\n    function setRewarder(address _rewarder) external returns (bool);\\r\\n\\r\\n    function setPool(address _pool) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x9c296a27efa1891c10ce66cf681b24ee2280567abe87e925419f30470a4f16ba\",\"license\":\"MIT\"},\"contracts/libs/WethUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../interfaces/IWETH.sol\\\";\\r\\n\\r\\nlibrary WethUtils {\\r\\n    using SafeERC20 for IWETH;\\r\\n\\r\\n    IWETH public constant weth = IWETH(0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6); //WETH GOERLI\\r\\n\\r\\n    function isWeth(address token) internal pure returns (bool) {\\r\\n        return address(weth) == token;\\r\\n    }\\r\\n\\r\\n    function wrap(uint256 amount) internal {\\r\\n        weth.deposit{value: amount}();\\r\\n    }\\r\\n\\r\\n    function unwrap(uint256 amount) internal {\\r\\n        weth.withdraw(amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) internal {\\r\\n        weth.safeTransfer(to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2ff3423bb3b63777a7f1377c3d1e32f13daf7e5ccb1e057ce376dcda364ffb47\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600c805461ffff19169055620f4240600d819055610e10600f556107d06010556103e8601155670de0b6b3a76400006012556611c37937e08000601355601455620186a06015556016805460ff19169055611388601755610bb86018553480156200006e57600080fd5b506040516200453738038062004537833981016040819052620000919162000301565b6200009c3362000294565b600180556001600160a01b038316620000eb5760405162461bcd60e51b815260206004820181905260248201526000805160206200451783398151915260448201526064015b60405180910390fd5b6001600160a01b038216620001325760405162461bcd60e51b81526020600482018190526024820152600080516020620045178339815191526044820152606401620000e2565b6001600160a01b038116620001795760405162461bcd60e51b81526020600482018190526024820152600080516020620045178339815191526044820152606401620000e2565b600380546001600160a01b0319166001600160a01b038516908117909155604051637e51dad560e11b815230600482015263fca3b5aa90602401600060405180830381600087803b158015620001ce57600080fd5b505af1158015620001e3573d6000803e3d6000fd5b5050600480546001600160a01b038681166001600160a01b03199283161783556005805491871691909216811790915560405163221b8a9560e11b815230928101929092529250634437152a9150602401602060405180830381600087803b1580156200024f57600080fd5b505af115801562000264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028a91906200034a565b5050505062000373565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620002fc57600080fd5b919050565b60008060006060848603121562000316578283fd5b6200032184620002e4565b92506200033160208501620002e4565b91506200034160408501620002e4565b90509250925092565b6000602082840312156200035c578081fd5b815180151581146200036c578182fd5b9392505050565b61419480620003836000396000f3fe6080604052600436106103dd5760003560e01c806384da2666116101fd578063c29118fc11610118578063e9ee2f30116100ab578063f0f442601161007a578063f0f4426014610b87578063f2fde38b14610ba7578063f84dfc6614610bc7578063f8c3212414610be7578063f9c3968e14610bfd57600080fd5b8063e9ee2f3014610af4578063ea5f7abe14610b14578063eceb559114610b2a578063ed21b97514610b3f57600080fd5b8063d9d30b63116100e7578063d9d30b6314610a7f578063e361348314610a9f578063e522538114610abf578063e969355f14610ad457600080fd5b8063c29118fc14610a09578063c97b496014610a29578063d300138614610a49578063d5d0cb1614610a5f57600080fd5b8063a8508d3e11610190578063b7c503661161015f578063b7c5036614610989578063b7da0777146109a9578063b8192205146109c9578063c0d78655146109e957600080fd5b8063a8508d3e14610929578063a85ebc5c1461093f578063b235d46814610954578063b4eae1cb1461097357600080fd5b80639f1bf63e116101cc5780639f1bf63e146108a55780639f6b3f3e146108bb578063a0712d68146108f6578063a7c6402c1461090957600080fd5b806384da266614610846578063868a27241461085c5780638da5cb5b1461087257806390e9f9481461089057600080fd5b80634a85ed56116102f85780636f33aec01161028b5780637adbf9731161025a5780637adbf973146107b65780637dc0d1d0146107d65780637e4831d3146107f65780638088c3181461081057806380fe2b751461083057600080fd5b80636f33aec014610747578063715018a61461076757806373b82edd1461077c5780637a991b6d1461079c57600080fd5b80635a64ad95116102c75780635a64ad95146106b15780635afa4cfb146106c757806361d027b3146106e75780636b718cf21461070757600080fd5b80634a85ed56146106495780634bfe4a57146106695780634ebf44181461067f578063514330cb1461068757600080fd5b8063311f5e74116103705780633e09a95f1161033f5780633e09a95f146105de5780634013124a146105fe578063458f58151461061357806349bfcca11461062957600080fd5b8063311f5e7414610530578063370158ea14610550578063370421421461059e57806338536275146105be57600080fd5b80631959a002116103ac5780631959a002146104825780631be626c1146104e45780632ebfa5bd146104fa57806330cb45151461051057600080fd5b8063088b699e146103e95780630b68acac146104265780630b78f9c01461044a57806310b0e7e81461046c57600080fd5b366103e457005b600080fd5b3480156103f557600080fd5b50600354610409906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561043257600080fd5b5061043c60105481565b60405190815260200161041d565b34801561045657600080fd5b5061046a610465366004613e06565b610c1d565b005b34801561047857600080fd5b5061043c60155481565b34801561048e57600080fd5b506104c461049d366004613c1b565b60086020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161041d565b3480156104f057600080fd5b5061043c60095481565b34801561050657600080fd5b5061043c600a5481565b34801561051c57600080fd5b5061046a61052b366004613c3e565b610d20565b34801561053c57600080fd5b5061046a61054b366004613dd6565b610db3565b34801561055c57600080fd5b506105656113f7565b60408051978852602088019690965294860193909352606085019190915215156080840152151560a083015260c082015260e00161041d565b3480156105aa57600080fd5b50600554610409906001600160a01b031681565b3480156105ca57600080fd5b5061046a6105d9366004613dd6565b611427565b3480156105ea57600080fd5b5061046a6105f9366004613c1b565b6114d9565b34801561060a57600080fd5b5061046a611590565b34801561061f57600080fd5b5061043c60175481565b34801561063557600080fd5b50600454610409906001600160a01b031681565b34801561065557600080fd5b50610409610664366004613dd6565b61180f565b34801561067557600080fd5b5061043c61232881565b61046a611839565b34801561069357600080fd5b5061069c6118d6565b6040805192835290151560208301520161041d565b3480156106bd57600080fd5b5061043c60185481565b3480156106d357600080fd5b5061046a6106e2366004613dd6565b6119bd565b3480156106f357600080fd5b50600754610409906001600160a01b031681565b34801561071357600080fd5b50610737610722366004613c1b565b601a6020526000908152604090205460ff1681565b604051901515815260200161041d565b34801561075357600080fd5b5061046a610762366004613c1b565b611a92565b34801561077357600080fd5b5061046a611abe565b34801561078857600080fd5b5061046a610797366004613e52565b611ad2565b3480156107a857600080fd5b506016546107379060ff1681565b3480156107c257600080fd5b5061046a6107d1366004613c1b565b611b3c565b3480156107e257600080fd5b50600254610409906001600160a01b031681565b34801561080257600080fd5b50600c546107379060ff1681565b34801561081c57600080fd5b50600654610409906001600160a01b031681565b34801561083c57600080fd5b5061043c60115481565b34801561085257600080fd5b5061043c60145481565b34801561086857600080fd5b5061043c600e5481565b34801561087e57600080fd5b506000546001600160a01b0316610409565b34801561089c57600080fd5b5061043c611be4565b3480156108b157600080fd5b5061043c60135481565b3480156108c757600080fd5b506108db6108d6366004613dd6565b611c74565b6040805193845260208401929092529082015260600161041d565b61046a610904366004613dd6565b611dfd565b34801561091557600080fd5b50601954610409906001600160a01b031681565b34801561093557600080fd5b5061043c60125481565b34801561094b57600080fd5b5061043c61202a565b34801561096057600080fd5b50600c5461073790610100900460ff1681565b34801561097f57600080fd5b5061043c600d5481565b34801561099557600080fd5b5061046a6109a4366004613c1b565b6120d6565b3480156109b557600080fd5b5061046a6109c4366004613c3e565b6120ff565b3480156109d557600080fd5b5061046a6109e4366004613e27565b61218e565b3480156109f557600080fd5b5061046a610a04366004613c1b565b612472565b348015610a1557600080fd5b5061046a610a24366004613d9e565b61249c565b348015610a3557600080fd5b5061046a610a44366004613dd6565b612500565b348015610a5557600080fd5b5061043c600b5481565b348015610a6b57600080fd5b5061046a610a7a366004613d66565b6125b6565b348015610a8b57600080fd5b5061046a610a9a366004613dd6565b61260f565b348015610aab57600080fd5b50610409610aba366004613dd6565b612a94565b348015610acb57600080fd5b5061046a612aa4565b348015610ae057600080fd5b5061046a610aef366004613dd6565b612d20565b348015610b0057600080fd5b5061046a610b0f366004613c3e565b612dc0565b348015610b2057600080fd5b5061043c600f5481565b348015610b3657600080fd5b5061043c612e4f565b348015610b4b57600080fd5b50610b5f610b5a366004613dd6565b612e78565b604080519586526020860194909452928401919091526060830152608082015260a00161041d565b348015610b9357600080fd5b5061046a610ba2366004613c1b565b613148565b348015610bb357600080fd5b5061046a610bc2366004613c1b565b6131eb565b348015610bd357600080fd5b506104c4610be2366004613dd6565b613261565b348015610bf357600080fd5b5061043c61138881565b348015610c0957600080fd5b50610409610c18366004613dd6565b6133fd565b610c2561340d565b611388821115610c7c5760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c3a3a736574466565733a3e4d494e54494e475f4645455f4d4158000060448201526064015b60405180910390fd5b612328811115610cd85760405162461bcd60e51b815260206004820152602160248201527f506f6f6c3a3a736574466565733a3e524544454d5054494f4e5f4645455f4d416044820152600b60fb1b6064820152608401610c73565b6017819055601882905560408051838152602081018390527f5c6323bf1c2d7aaea2c091a4751c1c87af7f2864650c336507a77d0557af37a191015b60405180910390a15050565b610d2861340d565b610d34601c6000613be9565b60005b8151811015610daf57601c828281518110610d6257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610da7816140f4565b915050610d37565b5050565b336000908152601a602052604090205460ff16610de25760405162461bcd60e51b8152600401610c7390613f5e565b610dea61202a565b811115610e575760405162461bcd60e51b815260206004820152603560248201527f506f6f6c3a3a61726265724275794261636b52656465656d3a20626f72726f77604482015274206578636565647320776574682062616c616e636560581b6064820152608401610c73565b6000610e6161202a565b90506000610e6d612e4f565b60195460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f90610ea6908790601c90600401613fb0565b60006040518083038186803b158015610ebe57600080fd5b505afa158015610ed2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610efa9190810190613cdf565b905060008160018351610f0d91906140b1565b81518110610f2b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806000610f4384611c74565b91945092509050600082156110175760195460405163d06ca61f60e01b81526001600160a01b039091169063d06ca61f90610f85908690601d90600401613fb0565b60006040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd99190810190613cdf565b95508560018751610fea91906140b1565b8151811061100857634e487b7160e01b600052603260045260246000fd5b6020026020010151905061101b565b5060005b6000816110288b8b6140b1565b611032919061405a565b905060008661103f611be4565b61104991906140b1565b905060008161105b84620f4240614092565b6110659190614072565b9050898110156110e95760405162461bcd60e51b815260206004820152604360248201527f506f6f6c3a3a61726265724275794261636b52656465656d3a206d757374206d60448201527f61696e7461696e206f7220696d70726f766520636f6c6c61746572616c20726160648201526274696f60e81b608482015260a401610c73565b6019546111159073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906001600160a01b03168e613467565b6019546040516338ed173960e01b81526001600160a01b03909116906338ed17399061114e908f908c90601c9030904290600401613fc9565b600060405180830381600087803b15801561116857600080fd5b505af115801561117c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111a49190810190613cdf565b50600354604051630852cd8d60e31b8152600481018a90526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156111eb57600080fd5b505af11580156111ff573d6000803e3d6000fd5b50505050600086111561131e5760055460405163a9059cbb60e01b8152306004820152602481018890526001600160a01b039091169063a9059cbb90604401600060405180830381600087803b15801561125857600080fd5b505af115801561126c573d6000803e3d6000fd5b505060195460045461128d93506001600160a01b0390811692501688613467565b6019546040516338ed173960e01b81526001600160a01b03909116906338ed1739906112c69089908890601d9030904290600401613fc9565b600060405180830381600087803b1580156112e057600080fd5b505af11580156112f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261131c9190810190613cdf565b505b6000611328612e4f565b90508a8110156113af5760405162461bcd60e51b815260206004820152604660248201527f506f6f6c3a3a61726265724275794261636b52656465656d3a20646964206e6f60448201527f74206d61696e7461696e206f7220696d70726f766520636f6c6c61746572616c60648201526520726174696f60d01b608482015260a401610c73565b60408051428152602081018390527fdb1231b7f4ee34f308e748ba35d95daa85630f95d5168a132bda08448d1d7e08910160405180910390a150505050505050505050505050565b600d54600e54601854601754600c5460ff80821691610100900416600061141c61202a565b905090919293949596565b61142f61340d565b620f424081111561149d5760405162461bcd60e51b815260206004820152603260248201527f506f6f6c3a3a7365744d696e436f6c6c61746572616c526174696f3a203e434f6044820152710989882a88aa48298bea482a8929ebe9a82b60731b6064820152608401610c73565b60148190556040518181527f5982e574cb778844329684a34107b512e3a2413a153fc02af924390158148c6f906020015b60405180910390a150565b6114e161340d565b6001600160a01b0381166115465760405162461bcd60e51b815260206004820152602660248201527f506f6f6c3a3a7365745377617053747261746567793a20696e76616c6964206160448201526564647265737360d01b6064820152608401610c73565b600680546001600160a01b0319166001600160a01b0383169081179091556040517ff42b2d6189f0c63bb22abb0ec7e0e9d32a43085515d7256a8a0786989e7f38fa90600090a250565b60165460ff16156116095760405162461bcd60e51b815260206004820152603e60248201527f506f6f6c3a3a72656672657368436f6c6c61746572616c526174696f3a20436f60448201527f6c6c61746572616c20526174696f20686173206265656e2070617573656400006064820152608401610c73565b600f54600e5461161990426140b1565b10156116a95760405162461bcd60e51b815260206004820152605360248201527f506f6f6c3a3a72656672657368436f6c6c61746572616c526174696f3a204d7560448201527f7374207761697420666f7220746865207265667265736820636f6f6c646f776e606482015272040e6d2dcc6ca40d8c2e6e840e4cacce4cae6d606b1b608482015260a401610c73565b60025460408051631819cc4760e31b815290516000926001600160a01b03169163c0ce6238916004808301926020929190829003018186803b1580156116ee57600080fd5b505afa158015611702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117269190613dee565b9050601354601254611738919061405a565b81111561178857601154600d5411611754576000600d556117d8565b6000601154600d5461176691906140b1565b9050601454811161177c57601454600d55611782565b600d8190555b506117d8565b60135460125461179891906140b1565b8110156117d857620f4240601054600d546117b3919061405a565b106117c457620f4240600d556117d8565b601054600d546117d4919061405a565b600d555b42600e55600d546040519081527f43dd06cd14239ec6c5a1b4ea9c2def7d8940aeda88ead0ab6fb960ce3c3c412d906020016114ce565b601b818154811061181f57600080fd5b6000918252602090912001546001600160a01b0316905081565b34806118955760405162461bcd60e51b815260206004820152602560248201527f506f6f6c3a3a7265636f6c6c61746572616c697a653a20496e76616c696420616044820152641b5bdd5b9d60da1b6064820152608401610c73565b61189e81613561565b60405181815233907fbcce792384bcc41455f8efeface08ee7880d3a4264ada39bb979554fd5985d609060200160405180910390a250565b6000806000620f4240600d54600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193057600080fd5b505afa158015611944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119689190613dee565b6119729190614092565b61197c9190614072565b9050600061198861202a565b90508181106119a65761199b82826140b1565b9350600192506119b7565b6119b081836140b1565b9350600092505b50509091565b336000908152601a602052604090205460ff166119ec5760405162461bcd60e51b8152600401610c7390613f5e565b6000806119f76118d6565b91509150808015611a085750600082115b15611a8d5781831115611a835760405162461bcd60e51b815260206004820152603f60248201527f506f6f6c3a3a61726265725769746864726177457863657373436f6c6c61746560448201527f72616c3a2054686520616d6f756e74206578636565647320737572706c7573006064820152608401610c73565b611a8d33846135cc565b505050565b611a9a61340d565b6001600160a01b03166000908152601a60205260409020805460ff19166001179055565b611ac661340d565b611ad060006135eb565b565b611ada61340d565b601084905560118390556013829055600f8190556040805185815260208101859052908101839052606081018290527f038f57571f57da47bfdd27bbcac94efe4d37d76fc9711fbeb5e68e75bc8243049060800160405180910390a150505050565b611b4461340d565b6001600160a01b038116611b9a5760405162461bcd60e51b815260206004820181905260248201527f506f6f6c3a3a7365744f7261636c653a20696e76616c696420616464726573736044820152606401610c73565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe41890600090a250565b600a54600354604080516318160ddd60e01b81529051600093926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611c2d57600080fd5b505afa158015611c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c659190613dee565b611c6f919061405a565b905090565b600080600080600260009054906101000a90046001600160a01b03166001600160a01b0316636e16399c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc857600080fd5b505afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d009190613dee565b905060008111611d225760405162461bcd60e51b8152600401610c7390613f18565b6000611d2c612e4f565b9050620f4240811115611d3f5750620f42405b620f4240611d4d8288614092565b611d579190614072565b9250620f4240811015611dbd5781620f424080670de0b6b3a764000081611d7e86826140b1565b611d88908c614092565b611d929190614092565b611d9c9190614092565b611da69190614072565b611db09190614072565b611dba9190614072565b93505b8015611df457620f42408080611dd3848a614092565b611ddd9190614092565b611de79190614072565b611df19190614072565b94505b50509193909250565b611e0561363b565b600c5460ff1615611e585760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c3a3a6d696e743a204d696e74696e67206973207061757365640000006044820152606401610c73565b34336000808080611e6886613261565b935093509350935086841015611eb95760405162461bcd60e51b8152602060048201526016602482015275506f6f6c3a3a6d696e743a203e20736c69707061676560501b6044820152606401610c73565b611ec286613561565b600083118015611ed25750600081115b15611f6957600654611f039073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906001600160a01b031683613467565b600654604051632b00f57560e11b815260048101839052602481018590526001600160a01b0390911690635601eaea90604401600060405180830381600087803b158015611f5057600080fd5b505af1158015611f64573d6000803e3d6000fd5b505050505b8315611fbe576001600160a01b038516600090815260086020526040902054611f9390859061405a565b6001600160a01b038616600090815260086020526040902055600a54611fba90859061405a565b600a555b611fc782613695565b604080516001600160a01b038716815260208101869052908101879052606081018390527fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb9060800160405180910390a150505050505061202760018055565b50565b6040516370a0823160e01b8152306004820152600090819073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906370a082319060240160206040518083038186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b19190613dee565b905060095481116120c35760006120d0565b6009546120d090826140b1565b91505090565b6120de61340d565b6001600160a01b03166000908152601a60205260409020805460ff19169055565b61210761340d565b612113601b6000613be9565b60005b8151811015610daf57601b82828151811061214157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580612186816140f4565b915050612116565b61219661363b565b600c54610100900460ff16156121f85760405162461bcd60e51b815260206004820152602160248201527f506f6f6c3a3a72656465656d3a2052656465656d696e672069732070617573656044820152601960fa1b6064820152608401610c73565b3360008080808061220889612e78565b9450945094509450945061221a61202a565b8111156122695760405162461bcd60e51b815260206004820152601b60248201527f506f6f6c3a3a72656465656d3a203e204554482062616c616e636500000000006044820152606401610c73565b6122738484613730565b8487111580156122835750838811155b6122cf5760405162461bcd60e51b815260206004820152601760248201527f506f6f6c3a3a72656465656d3a203e736c6970706167650000000000000000006044820152606401610c73565b841561232a576001600160a01b0386166000908152600860205260409020600201546122fc90869061405a565b6001600160a01b03871660009081526008602052604090206002015560095461232690869061405a565b6009555b8315612385576001600160a01b03861660009081526008602052604090206001015461235790859061405a565b6001600160a01b038716600090815260086020526040902060010155600b5461238190859061405a565b600b555b6001600160a01b03868116600081815260086020526040908190204360039182015554905163079cc67960e41b81526004810192909252602482018c9052909116906379cc679090604401600060405180830381600087803b1580156123ea57600080fd5b505af11580156123fe573d6000803e3d6000fd5b5050505061240b82613695565b604080516001600160a01b0388168152602081018b905290810186905260608101859052608081018390527fe02f6383e19e87c24e0c03e2cd5dbd05156cb29a1b0f3dbca1fa3430e444f63d9060a00160405180910390a1505050505050611a8d60018055565b61247a61340d565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6124a461340d565b600c8054821515610100810261ff001986151590811661ffff1990941693909317179092556040805191825260208201929092527fe4e2759610fe740b4c8247147491ae3e248b92fb63181dc697aff6faf00f65d79101610d14565b61250861340d565b620493e08111156125815760405162461bcd60e51b815260206004820152603f60248201527f506f6f6c3a3a73657459546f6b656e536c6970706167653a2079546f6b656e5360448201527f6c6970706167652063616e6e6f74206265206d6f7265207468616e20333025006064820152608401610c73565b60158190556040518181527fd86c2dfaa734f6aef8a960c73c2d669e130018cc4f61aeb1f115c64844a96e0a906020016114ce565b6125be61340d565b60165460ff16151581151514612027576016805460ff19168215159081179091556040519081527fe9b03f52b6ce464fd3d6eec943f0c67d7575005f3b0bbf2fad4ea38b4ed72084906020016114ce565b336000908152601a602052604090205460ff1661263e5760405162461bcd60e51b8152600401610c7390613f5e565b6040516370a0823160e01b815230600482015260009073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906370a082319060240160206040518083038186803b15801561268b57600080fd5b505afa15801561269f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c39190613dee565b60195460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f906126fc908690601b90600401613fb0565b60006040518083038186803b15801561271457600080fd5b505afa158015612728573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127509190810190613cdf565b90506000816001835161276391906140b1565b8151811061278157634e487b7160e01b600052603260045260246000fd5b602002602001015190508381101561281c5760405162461bcd60e51b815260206004820152605260248201527f506f6f6c3a3a61726265724d696e743a206d696e74206d75737420726573756c60448201527f7420696e2061746c65617374203130302520636f6c6c61746572616c69736174606482015271696f6e206f66206e65772078546f6b656e7360701b608482015260a401610c73565b6003546040516340c10f1960e01b8152306004820152602481018690526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561286857600080fd5b505af115801561287c573d6000803e3d6000fd5b505060195460035461289d93506001600160a01b0390811692501686613467565b6019546040516338ed173960e01b81526001600160a01b03909116906338ed1739906128d69087908590601b9030904290600401613fc9565b600060405180830381600087803b1580156128f057600080fd5b505af1158015612904573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261292c9190810190613cdf565b506040516370a0823160e01b8152306004820152600090849073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906370a082319060240160206040518083038186803b15801561297c57600080fd5b505afa158015612990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b49190613dee565b6129be91906140b1565b905081811015612a4c5760405162461bcd60e51b815260206004820152604d60248201527f506f6f6c3a3a61726265724d696e743a206d696e7420646964206e6f7420726560448201527f73756c7420696e203130302520636f6c6c61746572616c697a6174696f6e206f60648201526c66206e65772078546f6b656e7360981b608482015260a401610c73565b60408051428152602081018790529081018290527fd5e036aa30197d6e568a087aebf4675396d6cb8e75fa11e3abc0ea11412b25f29060600160405180910390a15050505050565b601d818154811061181f57600080fd5b612aac61363b565b336000818152600860205260409020600301544311612b0d5760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c3a3a636f6c6c6563743a203c6d696e696d756d5f64656c61790000006044820152606401610c73565b6001600160a01b0381166000908152600860205260408120548190819081908190819015612b6b576001600160a01b03871660009081526008602052604081208054919055600a54909350612b639084906140b1565b600a55600195505b6001600160a01b03871660009081526008602052604090206001015415612bc5576001600160a01b03871660009081526008602052604081206001018054919055600b54909250612bbd9083906140b1565b600b55600194505b6001600160a01b03871660009081526008602052604090206002015415612c1d57506001600160a01b03861660009081526008602052604081206002018054919055600954612c159082906140b1565b600955600193505b8515612c8a576003546040516340c10f1960e01b81526001600160a01b03898116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b158015612c7157600080fd5b505af1158015612c85573d6000803e3d6000fd5b505050505b8415612cf75760055460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018590529091169063a9059cbb90604401600060405180830381600087803b158015612cde57600080fd5b505af1158015612cf2573d6000803e3d6000fd5b505050505b8315612d1057612d06816137d9565b612d108782613841565b50505050505050611ad060018055565b612d2861340d565b600080612d336118d6565b91509150808015612d445750600082115b15611a8d5781831115612db75760405162461bcd60e51b815260206004820152603560248201527f506f6f6c3a3a726564756365457863657373436f6c6c61746572616c3a2054686044820152746520616d6f756e7420697320746f6f206c6172676560581b6064820152608401610c73565b611a8d83613695565b612dc861340d565b612dd4601d6000613be9565b60005b8151811015610daf57601d828281518110612e0257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580612e47816140f4565b915050612dd7565b6000612e59611be4565b612e6161202a565b612e6e90620f4240614092565b611c6f9190614072565b600080600080600080600260009054906101000a90046001600160a01b03166001600160a01b0316636e16399c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ecf57600080fd5b505afa158015612ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f079190613dee565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316635f4370a56040518163ffffffff1660e01b815260040160206040518083038186803b158015612f5957600080fd5b505afa158015612f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f919190613dee565b905060008211612fb35760405162461bcd60e51b8152600401610c7390613f18565b620f4240600d5489612fc59190614092565b612fcf9190614072565b9250620f4240600d5410156130bb5781620f424080670de0b6b3a7640000601754620f4240612ffe91906140b1565b600d5461300e90620f42406140b1565b613018908e614092565b6130229190614092565b61302c9190614092565b6130369190614072565b6130409190614072565b61304a9190614072565b955080620f424080670de0b6b3a7640000601754620f424061306c91906140b1565b600d5461307c90620f42406140b1565b613086908e614092565b6130909190614092565b61309a9190614092565b6130a49190614072565b6130ae9190614072565b6130b89190614072565b94505b600d541561313d57620f424080601754620f42406130d991906140b1565b600d546130e6908c614092565b6130f09190614092565b6130fa9190614072565b6131049190614072565b9650620f424080601754600d548b61311c9190614092565b6131269190614092565b6131309190614072565b61313a9190614072565b93505b505091939590929450565b6007546001600160a01b0316156131a15760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c3a3a73657454726561737572793a206e6f7420616c6c6f77656400006044820152606401610c73565b600780546001600160a01b0319166001600160a01b0383169081179091556040517f3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f90600090a250565b6131f361340d565b6001600160a01b0381166132585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c73565b612027816135eb565b6000806000806000600260009054906101000a90046001600160a01b03166001600160a01b0316635f4370a56040518163ffffffff1660e01b815260040160206040518083038186803b1580156132b757600080fd5b505afa1580156132cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ef9190613dee565b90506000811161334d5760405162461bcd60e51b8152602060048201526024808201527f506f6f6c3a3a63616c634d696e743a20496e76616c69642059546f6b656e20706044820152637269636560e01b6064820152608401610c73565b620f4240600d54620f424061336291906140b1565b61336c9088614092565b6133769190614072565b91508061338b670de0b6b3a764000084614092565b6133959190614072565b9350620f424080600d54601854896133ad9190614092565b6133b79190614092565b6133c19190614072565b6133cb9190614072565b9250620f4240601854876133df9190614092565b6133e99190614072565b6133f390876140b1565b9450509193509193565b601c818154811061181f57600080fd5b6000546001600160a01b03163314611ad05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c73565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156134b357600080fd5b505afa1580156134c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134eb9190613dee565b6134f5919061405a565b6040516001600160a01b03851660248201526044810182905290915061355b90859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261395a565b50505050565b73b4fbf271143f4fbf7b91a5ded31805e42b2208d66001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156135b057600080fd5b505af11580156135c4573d6000803e3d6000fd5b505050505050565b610daf73b4fbf271143f4fbf7b91a5ded31805e42b2208d68383613a2c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154141561368e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c73565b6002600155565b6007546001600160a01b03166136fe5760405162461bcd60e51b815260206004820152602860248201527f506f6f6c3a3a7472616e73666572546f54726561737572793a496e76616c6964604482015267206164647265737360c01b6064820152608401610c73565b8015612027576007546120279073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906001600160a01b031683613a2c565b60008183111561374b5761374482846140b1565b9050613758565b61375583836140b1565b90505b620f42406015548361376a9190614092565b6137749190614072565b811115611a8d5760405162461bcd60e51b815260206004820152602d60248201527f506f6f6c3a3a636865636b5072696365466c756374756174696f6e3a203e207960448201526c546f6b656e536c69707061676560981b6064820152608401610c73565b604051632e1a7d4d60e01b81526004810182905273b4fbf271143f4fbf7b91a5ded31805e42b2208d690632e1a7d4d90602401600060405180830381600087803b15801561382657600080fd5b505af115801561383a573d6000803e3d6000fd5b5050505050565b804710156138915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c73565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146138de576040519150601f19603f3d011682016040523d82523d6000602084013e6138e3565b606091505b5050905080611a8d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c73565b60006139af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a5c9092919063ffffffff16565b805190915015611a8d57808060200190518101906139cd9190613d82565b611a8d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c73565b6040516001600160a01b038316602482015260448101829052611a8d90849063a9059cbb60e01b90606401613524565b6060613a6b8484600085613a73565b949350505050565b606082471015613ad45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c73565b600080866001600160a01b03168587604051613af09190613ec9565b60006040518083038185875af1925050503d8060008114613b2d576040519150601f19603f3d011682016040523d82523d6000602084013e613b32565b606091505b5091509150613b4387838387613b4e565b979650505050505050565b60608315613bba578251613bb3576001600160a01b0385163b613bb35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c73565b5081613a6b565b613a6b8383815115613bcf5781518083602001fd5b8060405162461bcd60e51b8152600401610c739190613ee5565b508054600082559060005260206000209081019061202791905b80821115613c175760008155600101613c03565b5090565b600060208284031215613c2c578081fd5b8135613c378161413b565b9392505050565b60006020808385031215613c50578182fd5b823567ffffffffffffffff811115613c66578283fd5b8301601f81018513613c76578283fd5b8035613c89613c8482614036565b614005565b80828252848201915084840188868560051b8701011115613ca8578687fd5b8694505b83851015613cd3578035613cbf8161413b565b835260019490940193918501918501613cac565b50979650505050505050565b60006020808385031215613cf1578182fd5b825167ffffffffffffffff811115613d07578283fd5b8301601f81018513613d17578283fd5b8051613d25613c8482614036565b80828252848201915084840188868560051b8701011115613d44578687fd5b8694505b83851015613cd3578051835260019490940193918501918501613d48565b600060208284031215613d77578081fd5b8135613c3781614150565b600060208284031215613d93578081fd5b8151613c3781614150565b60008060408385031215613db0578081fd5b8235613dbb81614150565b91506020830135613dcb81614150565b809150509250929050565b600060208284031215613de7578081fd5b5035919050565b600060208284031215613dff578081fd5b5051919050565b60008060408385031215613e18578182fd5b50508035926020909101359150565b600080600060608486031215613e3b578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613e67578081fd5b5050823594602084013594506040840135936060013592509050565b6000815480845260208085019450838352808320835b83811015613ebe5781546001600160a01b031687529582019560019182019101613e99565b509495945050505050565b60008251613edb8184602087016140c8565b9190910192915050565b6020815260008251806020840152613f048160408501602087016140c8565b601f01601f19169190910160400192915050565b60208082526026908201527f506f6f6c3a3a63616c6352656465656d3a20496e76616c69642059546f6b656e60408201526520707269636560d01b606082015260800190565b60208082526032908201527f506f6f6c3a3a6f6e6c7941726265723a206f6e6c7920617070726f7665642061604082015271726265722063616e2063616c6c207468697360701b606082015260800190565b828152604060208201526000613a6b6040830184613e83565b85815284602082015260a060408201526000613fe860a0830186613e83565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561402e5761402e614125565b604052919050565b600067ffffffffffffffff82111561405057614050614125565b5060051b60200190565b6000821982111561406d5761406d61410f565b500190565b60008261408d57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156140ac576140ac61410f565b500290565b6000828210156140c3576140c361410f565b500390565b60005b838110156140e35781810151838201526020016140cb565b8381111561355b5750506000910152565b60006000198214156141085761410861410f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461202757600080fd5b801515811461202757600080fdfea2646970667358221220c8fef4d7935ab0a249afcaf6c86dda3b28cb0b1173affa71a4ed457611d76de864736f6c63430008040033506f6f6c3a3a696e697469616c697a653a20696e76616c696441646472657373",
  "deployedBytecode": "0x6080604052600436106103dd5760003560e01c806384da2666116101fd578063c29118fc11610118578063e9ee2f30116100ab578063f0f442601161007a578063f0f4426014610b87578063f2fde38b14610ba7578063f84dfc6614610bc7578063f8c3212414610be7578063f9c3968e14610bfd57600080fd5b8063e9ee2f3014610af4578063ea5f7abe14610b14578063eceb559114610b2a578063ed21b97514610b3f57600080fd5b8063d9d30b63116100e7578063d9d30b6314610a7f578063e361348314610a9f578063e522538114610abf578063e969355f14610ad457600080fd5b8063c29118fc14610a09578063c97b496014610a29578063d300138614610a49578063d5d0cb1614610a5f57600080fd5b8063a8508d3e11610190578063b7c503661161015f578063b7c5036614610989578063b7da0777146109a9578063b8192205146109c9578063c0d78655146109e957600080fd5b8063a8508d3e14610929578063a85ebc5c1461093f578063b235d46814610954578063b4eae1cb1461097357600080fd5b80639f1bf63e116101cc5780639f1bf63e146108a55780639f6b3f3e146108bb578063a0712d68146108f6578063a7c6402c1461090957600080fd5b806384da266614610846578063868a27241461085c5780638da5cb5b1461087257806390e9f9481461089057600080fd5b80634a85ed56116102f85780636f33aec01161028b5780637adbf9731161025a5780637adbf973146107b65780637dc0d1d0146107d65780637e4831d3146107f65780638088c3181461081057806380fe2b751461083057600080fd5b80636f33aec014610747578063715018a61461076757806373b82edd1461077c5780637a991b6d1461079c57600080fd5b80635a64ad95116102c75780635a64ad95146106b15780635afa4cfb146106c757806361d027b3146106e75780636b718cf21461070757600080fd5b80634a85ed56146106495780634bfe4a57146106695780634ebf44181461067f578063514330cb1461068757600080fd5b8063311f5e74116103705780633e09a95f1161033f5780633e09a95f146105de5780634013124a146105fe578063458f58151461061357806349bfcca11461062957600080fd5b8063311f5e7414610530578063370158ea14610550578063370421421461059e57806338536275146105be57600080fd5b80631959a002116103ac5780631959a002146104825780631be626c1146104e45780632ebfa5bd146104fa57806330cb45151461051057600080fd5b8063088b699e146103e95780630b68acac146104265780630b78f9c01461044a57806310b0e7e81461046c57600080fd5b366103e457005b600080fd5b3480156103f557600080fd5b50600354610409906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561043257600080fd5b5061043c60105481565b60405190815260200161041d565b34801561045657600080fd5b5061046a610465366004613e06565b610c1d565b005b34801561047857600080fd5b5061043c60155481565b34801561048e57600080fd5b506104c461049d366004613c1b565b60086020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161041d565b3480156104f057600080fd5b5061043c60095481565b34801561050657600080fd5b5061043c600a5481565b34801561051c57600080fd5b5061046a61052b366004613c3e565b610d20565b34801561053c57600080fd5b5061046a61054b366004613dd6565b610db3565b34801561055c57600080fd5b506105656113f7565b60408051978852602088019690965294860193909352606085019190915215156080840152151560a083015260c082015260e00161041d565b3480156105aa57600080fd5b50600554610409906001600160a01b031681565b3480156105ca57600080fd5b5061046a6105d9366004613dd6565b611427565b3480156105ea57600080fd5b5061046a6105f9366004613c1b565b6114d9565b34801561060a57600080fd5b5061046a611590565b34801561061f57600080fd5b5061043c60175481565b34801561063557600080fd5b50600454610409906001600160a01b031681565b34801561065557600080fd5b50610409610664366004613dd6565b61180f565b34801561067557600080fd5b5061043c61232881565b61046a611839565b34801561069357600080fd5b5061069c6118d6565b6040805192835290151560208301520161041d565b3480156106bd57600080fd5b5061043c60185481565b3480156106d357600080fd5b5061046a6106e2366004613dd6565b6119bd565b3480156106f357600080fd5b50600754610409906001600160a01b031681565b34801561071357600080fd5b50610737610722366004613c1b565b601a6020526000908152604090205460ff1681565b604051901515815260200161041d565b34801561075357600080fd5b5061046a610762366004613c1b565b611a92565b34801561077357600080fd5b5061046a611abe565b34801561078857600080fd5b5061046a610797366004613e52565b611ad2565b3480156107a857600080fd5b506016546107379060ff1681565b3480156107c257600080fd5b5061046a6107d1366004613c1b565b611b3c565b3480156107e257600080fd5b50600254610409906001600160a01b031681565b34801561080257600080fd5b50600c546107379060ff1681565b34801561081c57600080fd5b50600654610409906001600160a01b031681565b34801561083c57600080fd5b5061043c60115481565b34801561085257600080fd5b5061043c60145481565b34801561086857600080fd5b5061043c600e5481565b34801561087e57600080fd5b506000546001600160a01b0316610409565b34801561089c57600080fd5b5061043c611be4565b3480156108b157600080fd5b5061043c60135481565b3480156108c757600080fd5b506108db6108d6366004613dd6565b611c74565b6040805193845260208401929092529082015260600161041d565b61046a610904366004613dd6565b611dfd565b34801561091557600080fd5b50601954610409906001600160a01b031681565b34801561093557600080fd5b5061043c60125481565b34801561094b57600080fd5b5061043c61202a565b34801561096057600080fd5b50600c5461073790610100900460ff1681565b34801561097f57600080fd5b5061043c600d5481565b34801561099557600080fd5b5061046a6109a4366004613c1b565b6120d6565b3480156109b557600080fd5b5061046a6109c4366004613c3e565b6120ff565b3480156109d557600080fd5b5061046a6109e4366004613e27565b61218e565b3480156109f557600080fd5b5061046a610a04366004613c1b565b612472565b348015610a1557600080fd5b5061046a610a24366004613d9e565b61249c565b348015610a3557600080fd5b5061046a610a44366004613dd6565b612500565b348015610a5557600080fd5b5061043c600b5481565b348015610a6b57600080fd5b5061046a610a7a366004613d66565b6125b6565b348015610a8b57600080fd5b5061046a610a9a366004613dd6565b61260f565b348015610aab57600080fd5b50610409610aba366004613dd6565b612a94565b348015610acb57600080fd5b5061046a612aa4565b348015610ae057600080fd5b5061046a610aef366004613dd6565b612d20565b348015610b0057600080fd5b5061046a610b0f366004613c3e565b612dc0565b348015610b2057600080fd5b5061043c600f5481565b348015610b3657600080fd5b5061043c612e4f565b348015610b4b57600080fd5b50610b5f610b5a366004613dd6565b612e78565b604080519586526020860194909452928401919091526060830152608082015260a00161041d565b348015610b9357600080fd5b5061046a610ba2366004613c1b565b613148565b348015610bb357600080fd5b5061046a610bc2366004613c1b565b6131eb565b348015610bd357600080fd5b506104c4610be2366004613dd6565b613261565b348015610bf357600080fd5b5061043c61138881565b348015610c0957600080fd5b50610409610c18366004613dd6565b6133fd565b610c2561340d565b611388821115610c7c5760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c3a3a736574466565733a3e4d494e54494e475f4645455f4d4158000060448201526064015b60405180910390fd5b612328811115610cd85760405162461bcd60e51b815260206004820152602160248201527f506f6f6c3a3a736574466565733a3e524544454d5054494f4e5f4645455f4d416044820152600b60fb1b6064820152608401610c73565b6017819055601882905560408051838152602081018390527f5c6323bf1c2d7aaea2c091a4751c1c87af7f2864650c336507a77d0557af37a191015b60405180910390a15050565b610d2861340d565b610d34601c6000613be9565b60005b8151811015610daf57601c828281518110610d6257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580610da7816140f4565b915050610d37565b5050565b336000908152601a602052604090205460ff16610de25760405162461bcd60e51b8152600401610c7390613f5e565b610dea61202a565b811115610e575760405162461bcd60e51b815260206004820152603560248201527f506f6f6c3a3a61726265724275794261636b52656465656d3a20626f72726f77604482015274206578636565647320776574682062616c616e636560581b6064820152608401610c73565b6000610e6161202a565b90506000610e6d612e4f565b60195460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f90610ea6908790601c90600401613fb0565b60006040518083038186803b158015610ebe57600080fd5b505afa158015610ed2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610efa9190810190613cdf565b905060008160018351610f0d91906140b1565b81518110610f2b57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806000610f4384611c74565b91945092509050600082156110175760195460405163d06ca61f60e01b81526001600160a01b039091169063d06ca61f90610f85908690601d90600401613fb0565b60006040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd99190810190613cdf565b95508560018751610fea91906140b1565b8151811061100857634e487b7160e01b600052603260045260246000fd5b6020026020010151905061101b565b5060005b6000816110288b8b6140b1565b611032919061405a565b905060008661103f611be4565b61104991906140b1565b905060008161105b84620f4240614092565b6110659190614072565b9050898110156110e95760405162461bcd60e51b815260206004820152604360248201527f506f6f6c3a3a61726265724275794261636b52656465656d3a206d757374206d60448201527f61696e7461696e206f7220696d70726f766520636f6c6c61746572616c20726160648201526274696f60e81b608482015260a401610c73565b6019546111159073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906001600160a01b03168e613467565b6019546040516338ed173960e01b81526001600160a01b03909116906338ed17399061114e908f908c90601c9030904290600401613fc9565b600060405180830381600087803b15801561116857600080fd5b505af115801561117c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111a49190810190613cdf565b50600354604051630852cd8d60e31b8152600481018a90526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156111eb57600080fd5b505af11580156111ff573d6000803e3d6000fd5b50505050600086111561131e5760055460405163a9059cbb60e01b8152306004820152602481018890526001600160a01b039091169063a9059cbb90604401600060405180830381600087803b15801561125857600080fd5b505af115801561126c573d6000803e3d6000fd5b505060195460045461128d93506001600160a01b0390811692501688613467565b6019546040516338ed173960e01b81526001600160a01b03909116906338ed1739906112c69089908890601d9030904290600401613fc9565b600060405180830381600087803b1580156112e057600080fd5b505af11580156112f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261131c9190810190613cdf565b505b6000611328612e4f565b90508a8110156113af5760405162461bcd60e51b815260206004820152604660248201527f506f6f6c3a3a61726265724275794261636b52656465656d3a20646964206e6f60448201527f74206d61696e7461696e206f7220696d70726f766520636f6c6c61746572616c60648201526520726174696f60d01b608482015260a401610c73565b60408051428152602081018390527fdb1231b7f4ee34f308e748ba35d95daa85630f95d5168a132bda08448d1d7e08910160405180910390a150505050505050505050505050565b600d54600e54601854601754600c5460ff80821691610100900416600061141c61202a565b905090919293949596565b61142f61340d565b620f424081111561149d5760405162461bcd60e51b815260206004820152603260248201527f506f6f6c3a3a7365744d696e436f6c6c61746572616c526174696f3a203e434f6044820152710989882a88aa48298bea482a8929ebe9a82b60731b6064820152608401610c73565b60148190556040518181527f5982e574cb778844329684a34107b512e3a2413a153fc02af924390158148c6f906020015b60405180910390a150565b6114e161340d565b6001600160a01b0381166115465760405162461bcd60e51b815260206004820152602660248201527f506f6f6c3a3a7365745377617053747261746567793a20696e76616c6964206160448201526564647265737360d01b6064820152608401610c73565b600680546001600160a01b0319166001600160a01b0383169081179091556040517ff42b2d6189f0c63bb22abb0ec7e0e9d32a43085515d7256a8a0786989e7f38fa90600090a250565b60165460ff16156116095760405162461bcd60e51b815260206004820152603e60248201527f506f6f6c3a3a72656672657368436f6c6c61746572616c526174696f3a20436f60448201527f6c6c61746572616c20526174696f20686173206265656e2070617573656400006064820152608401610c73565b600f54600e5461161990426140b1565b10156116a95760405162461bcd60e51b815260206004820152605360248201527f506f6f6c3a3a72656672657368436f6c6c61746572616c526174696f3a204d7560448201527f7374207761697420666f7220746865207265667265736820636f6f6c646f776e606482015272040e6d2dcc6ca40d8c2e6e840e4cacce4cae6d606b1b608482015260a401610c73565b60025460408051631819cc4760e31b815290516000926001600160a01b03169163c0ce6238916004808301926020929190829003018186803b1580156116ee57600080fd5b505afa158015611702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117269190613dee565b9050601354601254611738919061405a565b81111561178857601154600d5411611754576000600d556117d8565b6000601154600d5461176691906140b1565b9050601454811161177c57601454600d55611782565b600d8190555b506117d8565b60135460125461179891906140b1565b8110156117d857620f4240601054600d546117b3919061405a565b106117c457620f4240600d556117d8565b601054600d546117d4919061405a565b600d555b42600e55600d546040519081527f43dd06cd14239ec6c5a1b4ea9c2def7d8940aeda88ead0ab6fb960ce3c3c412d906020016114ce565b601b818154811061181f57600080fd5b6000918252602090912001546001600160a01b0316905081565b34806118955760405162461bcd60e51b815260206004820152602560248201527f506f6f6c3a3a7265636f6c6c61746572616c697a653a20496e76616c696420616044820152641b5bdd5b9d60da1b6064820152608401610c73565b61189e81613561565b60405181815233907fbcce792384bcc41455f8efeface08ee7880d3a4264ada39bb979554fd5985d609060200160405180910390a250565b6000806000620f4240600d54600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193057600080fd5b505afa158015611944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119689190613dee565b6119729190614092565b61197c9190614072565b9050600061198861202a565b90508181106119a65761199b82826140b1565b9350600192506119b7565b6119b081836140b1565b9350600092505b50509091565b336000908152601a602052604090205460ff166119ec5760405162461bcd60e51b8152600401610c7390613f5e565b6000806119f76118d6565b91509150808015611a085750600082115b15611a8d5781831115611a835760405162461bcd60e51b815260206004820152603f60248201527f506f6f6c3a3a61726265725769746864726177457863657373436f6c6c61746560448201527f72616c3a2054686520616d6f756e74206578636565647320737572706c7573006064820152608401610c73565b611a8d33846135cc565b505050565b611a9a61340d565b6001600160a01b03166000908152601a60205260409020805460ff19166001179055565b611ac661340d565b611ad060006135eb565b565b611ada61340d565b601084905560118390556013829055600f8190556040805185815260208101859052908101839052606081018290527f038f57571f57da47bfdd27bbcac94efe4d37d76fc9711fbeb5e68e75bc8243049060800160405180910390a150505050565b611b4461340d565b6001600160a01b038116611b9a5760405162461bcd60e51b815260206004820181905260248201527f506f6f6c3a3a7365744f7261636c653a20696e76616c696420616464726573736044820152606401610c73565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe41890600090a250565b600a54600354604080516318160ddd60e01b81529051600093926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611c2d57600080fd5b505afa158015611c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c659190613dee565b611c6f919061405a565b905090565b600080600080600260009054906101000a90046001600160a01b03166001600160a01b0316636e16399c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc857600080fd5b505afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d009190613dee565b905060008111611d225760405162461bcd60e51b8152600401610c7390613f18565b6000611d2c612e4f565b9050620f4240811115611d3f5750620f42405b620f4240611d4d8288614092565b611d579190614072565b9250620f4240811015611dbd5781620f424080670de0b6b3a764000081611d7e86826140b1565b611d88908c614092565b611d929190614092565b611d9c9190614092565b611da69190614072565b611db09190614072565b611dba9190614072565b93505b8015611df457620f42408080611dd3848a614092565b611ddd9190614092565b611de79190614072565b611df19190614072565b94505b50509193909250565b611e0561363b565b600c5460ff1615611e585760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c3a3a6d696e743a204d696e74696e67206973207061757365640000006044820152606401610c73565b34336000808080611e6886613261565b935093509350935086841015611eb95760405162461bcd60e51b8152602060048201526016602482015275506f6f6c3a3a6d696e743a203e20736c69707061676560501b6044820152606401610c73565b611ec286613561565b600083118015611ed25750600081115b15611f6957600654611f039073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906001600160a01b031683613467565b600654604051632b00f57560e11b815260048101839052602481018590526001600160a01b0390911690635601eaea90604401600060405180830381600087803b158015611f5057600080fd5b505af1158015611f64573d6000803e3d6000fd5b505050505b8315611fbe576001600160a01b038516600090815260086020526040902054611f9390859061405a565b6001600160a01b038616600090815260086020526040902055600a54611fba90859061405a565b600a555b611fc782613695565b604080516001600160a01b038716815260208101869052908101879052606081018390527fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb9060800160405180910390a150505050505061202760018055565b50565b6040516370a0823160e01b8152306004820152600090819073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906370a082319060240160206040518083038186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b19190613dee565b905060095481116120c35760006120d0565b6009546120d090826140b1565b91505090565b6120de61340d565b6001600160a01b03166000908152601a60205260409020805460ff19169055565b61210761340d565b612113601b6000613be9565b60005b8151811015610daf57601b82828151811061214157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580612186816140f4565b915050612116565b61219661363b565b600c54610100900460ff16156121f85760405162461bcd60e51b815260206004820152602160248201527f506f6f6c3a3a72656465656d3a2052656465656d696e672069732070617573656044820152601960fa1b6064820152608401610c73565b3360008080808061220889612e78565b9450945094509450945061221a61202a565b8111156122695760405162461bcd60e51b815260206004820152601b60248201527f506f6f6c3a3a72656465656d3a203e204554482062616c616e636500000000006044820152606401610c73565b6122738484613730565b8487111580156122835750838811155b6122cf5760405162461bcd60e51b815260206004820152601760248201527f506f6f6c3a3a72656465656d3a203e736c6970706167650000000000000000006044820152606401610c73565b841561232a576001600160a01b0386166000908152600860205260409020600201546122fc90869061405a565b6001600160a01b03871660009081526008602052604090206002015560095461232690869061405a565b6009555b8315612385576001600160a01b03861660009081526008602052604090206001015461235790859061405a565b6001600160a01b038716600090815260086020526040902060010155600b5461238190859061405a565b600b555b6001600160a01b03868116600081815260086020526040908190204360039182015554905163079cc67960e41b81526004810192909252602482018c9052909116906379cc679090604401600060405180830381600087803b1580156123ea57600080fd5b505af11580156123fe573d6000803e3d6000fd5b5050505061240b82613695565b604080516001600160a01b0388168152602081018b905290810186905260608101859052608081018390527fe02f6383e19e87c24e0c03e2cd5dbd05156cb29a1b0f3dbca1fa3430e444f63d9060a00160405180910390a1505050505050611a8d60018055565b61247a61340d565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6124a461340d565b600c8054821515610100810261ff001986151590811661ffff1990941693909317179092556040805191825260208201929092527fe4e2759610fe740b4c8247147491ae3e248b92fb63181dc697aff6faf00f65d79101610d14565b61250861340d565b620493e08111156125815760405162461bcd60e51b815260206004820152603f60248201527f506f6f6c3a3a73657459546f6b656e536c6970706167653a2079546f6b656e5360448201527f6c6970706167652063616e6e6f74206265206d6f7265207468616e20333025006064820152608401610c73565b60158190556040518181527fd86c2dfaa734f6aef8a960c73c2d669e130018cc4f61aeb1f115c64844a96e0a906020016114ce565b6125be61340d565b60165460ff16151581151514612027576016805460ff19168215159081179091556040519081527fe9b03f52b6ce464fd3d6eec943f0c67d7575005f3b0bbf2fad4ea38b4ed72084906020016114ce565b336000908152601a602052604090205460ff1661263e5760405162461bcd60e51b8152600401610c7390613f5e565b6040516370a0823160e01b815230600482015260009073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906370a082319060240160206040518083038186803b15801561268b57600080fd5b505afa15801561269f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c39190613dee565b60195460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f906126fc908690601b90600401613fb0565b60006040518083038186803b15801561271457600080fd5b505afa158015612728573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127509190810190613cdf565b90506000816001835161276391906140b1565b8151811061278157634e487b7160e01b600052603260045260246000fd5b602002602001015190508381101561281c5760405162461bcd60e51b815260206004820152605260248201527f506f6f6c3a3a61726265724d696e743a206d696e74206d75737420726573756c60448201527f7420696e2061746c65617374203130302520636f6c6c61746572616c69736174606482015271696f6e206f66206e65772078546f6b656e7360701b608482015260a401610c73565b6003546040516340c10f1960e01b8152306004820152602481018690526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561286857600080fd5b505af115801561287c573d6000803e3d6000fd5b505060195460035461289d93506001600160a01b0390811692501686613467565b6019546040516338ed173960e01b81526001600160a01b03909116906338ed1739906128d69087908590601b9030904290600401613fc9565b600060405180830381600087803b1580156128f057600080fd5b505af1158015612904573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261292c9190810190613cdf565b506040516370a0823160e01b8152306004820152600090849073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906370a082319060240160206040518083038186803b15801561297c57600080fd5b505afa158015612990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b49190613dee565b6129be91906140b1565b905081811015612a4c5760405162461bcd60e51b815260206004820152604d60248201527f506f6f6c3a3a61726265724d696e743a206d696e7420646964206e6f7420726560448201527f73756c7420696e203130302520636f6c6c61746572616c697a6174696f6e206f60648201526c66206e65772078546f6b656e7360981b608482015260a401610c73565b60408051428152602081018790529081018290527fd5e036aa30197d6e568a087aebf4675396d6cb8e75fa11e3abc0ea11412b25f29060600160405180910390a15050505050565b601d818154811061181f57600080fd5b612aac61363b565b336000818152600860205260409020600301544311612b0d5760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c3a3a636f6c6c6563743a203c6d696e696d756d5f64656c61790000006044820152606401610c73565b6001600160a01b0381166000908152600860205260408120548190819081908190819015612b6b576001600160a01b03871660009081526008602052604081208054919055600a54909350612b639084906140b1565b600a55600195505b6001600160a01b03871660009081526008602052604090206001015415612bc5576001600160a01b03871660009081526008602052604081206001018054919055600b54909250612bbd9083906140b1565b600b55600194505b6001600160a01b03871660009081526008602052604090206002015415612c1d57506001600160a01b03861660009081526008602052604081206002018054919055600954612c159082906140b1565b600955600193505b8515612c8a576003546040516340c10f1960e01b81526001600160a01b03898116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b158015612c7157600080fd5b505af1158015612c85573d6000803e3d6000fd5b505050505b8415612cf75760055460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018590529091169063a9059cbb90604401600060405180830381600087803b158015612cde57600080fd5b505af1158015612cf2573d6000803e3d6000fd5b505050505b8315612d1057612d06816137d9565b612d108782613841565b50505050505050611ad060018055565b612d2861340d565b600080612d336118d6565b91509150808015612d445750600082115b15611a8d5781831115612db75760405162461bcd60e51b815260206004820152603560248201527f506f6f6c3a3a726564756365457863657373436f6c6c61746572616c3a2054686044820152746520616d6f756e7420697320746f6f206c6172676560581b6064820152608401610c73565b611a8d83613695565b612dc861340d565b612dd4601d6000613be9565b60005b8151811015610daf57601d828281518110612e0257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580612e47816140f4565b915050612dd7565b6000612e59611be4565b612e6161202a565b612e6e90620f4240614092565b611c6f9190614072565b600080600080600080600260009054906101000a90046001600160a01b03166001600160a01b0316636e16399c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ecf57600080fd5b505afa158015612ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f079190613dee565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316635f4370a56040518163ffffffff1660e01b815260040160206040518083038186803b158015612f5957600080fd5b505afa158015612f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f919190613dee565b905060008211612fb35760405162461bcd60e51b8152600401610c7390613f18565b620f4240600d5489612fc59190614092565b612fcf9190614072565b9250620f4240600d5410156130bb5781620f424080670de0b6b3a7640000601754620f4240612ffe91906140b1565b600d5461300e90620f42406140b1565b613018908e614092565b6130229190614092565b61302c9190614092565b6130369190614072565b6130409190614072565b61304a9190614072565b955080620f424080670de0b6b3a7640000601754620f424061306c91906140b1565b600d5461307c90620f42406140b1565b613086908e614092565b6130909190614092565b61309a9190614092565b6130a49190614072565b6130ae9190614072565b6130b89190614072565b94505b600d541561313d57620f424080601754620f42406130d991906140b1565b600d546130e6908c614092565b6130f09190614092565b6130fa9190614072565b6131049190614072565b9650620f424080601754600d548b61311c9190614092565b6131269190614092565b6131309190614072565b61313a9190614072565b93505b505091939590929450565b6007546001600160a01b0316156131a15760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c3a3a73657454726561737572793a206e6f7420616c6c6f77656400006044820152606401610c73565b600780546001600160a01b0319166001600160a01b0383169081179091556040517f3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f90600090a250565b6131f361340d565b6001600160a01b0381166132585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c73565b612027816135eb565b6000806000806000600260009054906101000a90046001600160a01b03166001600160a01b0316635f4370a56040518163ffffffff1660e01b815260040160206040518083038186803b1580156132b757600080fd5b505afa1580156132cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ef9190613dee565b90506000811161334d5760405162461bcd60e51b8152602060048201526024808201527f506f6f6c3a3a63616c634d696e743a20496e76616c69642059546f6b656e20706044820152637269636560e01b6064820152608401610c73565b620f4240600d54620f424061336291906140b1565b61336c9088614092565b6133769190614072565b91508061338b670de0b6b3a764000084614092565b6133959190614072565b9350620f424080600d54601854896133ad9190614092565b6133b79190614092565b6133c19190614072565b6133cb9190614072565b9250620f4240601854876133df9190614092565b6133e99190614072565b6133f390876140b1565b9450509193509193565b601c818154811061181f57600080fd5b6000546001600160a01b03163314611ad05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c73565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156134b357600080fd5b505afa1580156134c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134eb9190613dee565b6134f5919061405a565b6040516001600160a01b03851660248201526044810182905290915061355b90859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261395a565b50505050565b73b4fbf271143f4fbf7b91a5ded31805e42b2208d66001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156135b057600080fd5b505af11580156135c4573d6000803e3d6000fd5b505050505050565b610daf73b4fbf271143f4fbf7b91a5ded31805e42b2208d68383613a2c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154141561368e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c73565b6002600155565b6007546001600160a01b03166136fe5760405162461bcd60e51b815260206004820152602860248201527f506f6f6c3a3a7472616e73666572546f54726561737572793a496e76616c6964604482015267206164647265737360c01b6064820152608401610c73565b8015612027576007546120279073b4fbf271143f4fbf7b91a5ded31805e42b2208d6906001600160a01b031683613a2c565b60008183111561374b5761374482846140b1565b9050613758565b61375583836140b1565b90505b620f42406015548361376a9190614092565b6137749190614072565b811115611a8d5760405162461bcd60e51b815260206004820152602d60248201527f506f6f6c3a3a636865636b5072696365466c756374756174696f6e3a203e207960448201526c546f6b656e536c69707061676560981b6064820152608401610c73565b604051632e1a7d4d60e01b81526004810182905273b4fbf271143f4fbf7b91a5ded31805e42b2208d690632e1a7d4d90602401600060405180830381600087803b15801561382657600080fd5b505af115801561383a573d6000803e3d6000fd5b5050505050565b804710156138915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c73565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146138de576040519150601f19603f3d011682016040523d82523d6000602084013e6138e3565b606091505b5050905080611a8d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c73565b60006139af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a5c9092919063ffffffff16565b805190915015611a8d57808060200190518101906139cd9190613d82565b611a8d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c73565b6040516001600160a01b038316602482015260448101829052611a8d90849063a9059cbb60e01b90606401613524565b6060613a6b8484600085613a73565b949350505050565b606082471015613ad45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c73565b600080866001600160a01b03168587604051613af09190613ec9565b60006040518083038185875af1925050503d8060008114613b2d576040519150601f19603f3d011682016040523d82523d6000602084013e613b32565b606091505b5091509150613b4387838387613b4e565b979650505050505050565b60608315613bba578251613bb3576001600160a01b0385163b613bb35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c73565b5081613a6b565b613a6b8383815115613bcf5781518083602001fd5b8060405162461bcd60e51b8152600401610c739190613ee5565b508054600082559060005260206000209081019061202791905b80821115613c175760008155600101613c03565b5090565b600060208284031215613c2c578081fd5b8135613c378161413b565b9392505050565b60006020808385031215613c50578182fd5b823567ffffffffffffffff811115613c66578283fd5b8301601f81018513613c76578283fd5b8035613c89613c8482614036565b614005565b80828252848201915084840188868560051b8701011115613ca8578687fd5b8694505b83851015613cd3578035613cbf8161413b565b835260019490940193918501918501613cac565b50979650505050505050565b60006020808385031215613cf1578182fd5b825167ffffffffffffffff811115613d07578283fd5b8301601f81018513613d17578283fd5b8051613d25613c8482614036565b80828252848201915084840188868560051b8701011115613d44578687fd5b8694505b83851015613cd3578051835260019490940193918501918501613d48565b600060208284031215613d77578081fd5b8135613c3781614150565b600060208284031215613d93578081fd5b8151613c3781614150565b60008060408385031215613db0578081fd5b8235613dbb81614150565b91506020830135613dcb81614150565b809150509250929050565b600060208284031215613de7578081fd5b5035919050565b600060208284031215613dff578081fd5b5051919050565b60008060408385031215613e18578182fd5b50508035926020909101359150565b600080600060608486031215613e3b578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613e67578081fd5b5050823594602084013594506040840135936060013592509050565b6000815480845260208085019450838352808320835b83811015613ebe5781546001600160a01b031687529582019560019182019101613e99565b509495945050505050565b60008251613edb8184602087016140c8565b9190910192915050565b6020815260008251806020840152613f048160408501602087016140c8565b601f01601f19169190910160400192915050565b60208082526026908201527f506f6f6c3a3a63616c6352656465656d3a20496e76616c69642059546f6b656e60408201526520707269636560d01b606082015260800190565b60208082526032908201527f506f6f6c3a3a6f6e6c7941726265723a206f6e6c7920617070726f7665642061604082015271726265722063616e2063616c6c207468697360701b606082015260800190565b828152604060208201526000613a6b6040830184613e83565b85815284602082015260a060408201526000613fe860a0830186613e83565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561402e5761402e614125565b604052919050565b600067ffffffffffffffff82111561405057614050614125565b5060051b60200190565b6000821982111561406d5761406d61410f565b500190565b60008261408d57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156140ac576140ac61410f565b500290565b6000828210156140c3576140c361410f565b500390565b60005b838110156140e35781810151838201526020016140cb565b8381111561355b5750506000910152565b60006000198214156141085761410861410f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461202757600080fd5b801515811461202757600080fdfea2646970667358221220c8fef4d7935ab0a249afcaf6c86dda3b28cb0b1173affa71a4ed457611d76de864736f6c63430008040033",
  "libraries": {
    "WethUtils": "0xbb2906b75067dE190bEF3E3a26e1c142df96AE1c"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "arberCalcRedeem(uint256)": {
        "params": {
          "_xTokenIn": "Amount of XToken input."
        },
        "returns": {
          "_ethOut": ": the amount of Eth output",
          "_requiredEthBalance": ": required Eth balance in the pool",
          "_yTokenOutSpot": ": the amount of YToken output based on Spot price"
        }
      },
      "arberMint(uint256)": {
        "params": {
          "_xTokenAmount": "amount of xTokens to mint and sell"
        }
      },
      "arberWithdrawExcessCollateral(uint256)": {
        "params": {
          "_amount": "amount of WETH to reduce"
        }
      },
      "calcMint(uint256)": {
        "params": {
          "_ethIn": "Amount of Collateral token input."
        },
        "returns": {
          "_ethFee": ": the fee amount in Collateral token.",
          "_ethSwapIn": ": the amount of Collateral token to swap",
          "_xTokenOut": ": the amount of XToken output.",
          "_yTokenOutTwap": ": the amount of YToken output by swapping based on Twap price"
        }
      },
      "calcRedeem(uint256)": {
        "params": {
          "_xTokenIn": "Amount of XToken input."
        },
        "returns": {
          "_ethFee": ": the fee amount in Eth",
          "_ethOut": ": the amount of Eth output",
          "_requiredEthBalance": ": required Eth balance in the pool",
          "_yTokenOutSpot": ": the amount of YToken output based on Spot prrice",
          "_yTokenOutTwap": ": the amount of YToken output based on TWAP"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reduceExcessCollateral(uint256)": {
        "params": {
          "_amount": "amount of WETH to reduce"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCollateralRatioOptions(uint256,uint256,uint256,uint256)": {
        "params": {
          "_priceBand": "The collateral ratio will only be adjusted if current price move out of this band",
          "_ratioStepDown": "Step which Collateral Ratio will be decreased each updates",
          "_ratioStepUp": "Step which Collateral Ratio will be increased each updates",
          "_refreshCooldown": "The minimum delay between each Collateral Ratio updates"
        }
      },
      "setFees(uint256,uint256)": {
        "params": {
          "_mintingFee": "Minting fee in percentage",
          "_redemptionFee": "Redemption fee in percentage"
        }
      },
      "setMinCollateralRatio(uint256)": {
        "params": {
          "_minCollateralRatio": "value of minimum Collateral Ratio in 1e6 precision"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracle": "address of the oracle"
        }
      },
      "setSwapStrategy(address)": {
        "params": {
          "_swapStrategy": "address of Swapper utils contract"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "address of Treasury contract"
        }
      },
      "toggle(bool,bool)": {
        "params": {
          "_mintPaused": "Paused or NotPaused Minting",
          "_redeemPaused": "Paused or NotPaused Redemption"
        }
      },
      "toggleCollateralRatio(bool)": {
        "params": {
          "_collateralRatioPaused": "`true` or `false`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "arberCalcRedeem(uint256)": {
        "notice": "Calculate the expected results for redemption by approved arber"
      },
      "arberMint(uint256)": {
        "notice": "mint and sell xTokens when over peg, requires that >= 1 WETH per minted xToken is recieved."
      },
      "arberWithdrawExcessCollateral(uint256)": {
        "notice": "Transfer the excess balance of WETH to arber"
      },
      "calcExcessCollateralBalance()": {
        "notice": "Calculate the excess collateral balance"
      },
      "calcMint(uint256)": {
        "notice": "Calculate the expected results for zap minting"
      },
      "calcRedeem(uint256)": {
        "notice": "Calculate the expected results for redemption"
      },
      "collect()": {
        "notice": "collect all minting and redemption"
      },
      "recollateralize()": {
        "notice": "Function to recollateralize the pool by receiving ETH"
      },
      "reduceExcessCollateral(uint256)": {
        "notice": "Transfer the excess balance of WETH to FeeReserve"
      },
      "refreshCollateralRatio()": {
        "notice": "Update collateral ratio and adjust based on the TWAP price of XToken"
      },
      "setCollateralRatioOptions(uint256,uint256,uint256,uint256)": {
        "notice": "Configure variables related to Collateral Ratio"
      },
      "setFees(uint256,uint256)": {
        "notice": "Set the protocol fees"
      },
      "setMinCollateralRatio(uint256)": {
        "notice": "Set the minimum Collateral Ratio"
      },
      "setOracle(address)": {
        "notice": "Set new oracle address"
      },
      "setSwapStrategy(address)": {
        "notice": "Set the address of Swapper utils"
      },
      "setTreasury(address)": {
        "notice": "Set the address of Treasury"
      },
      "setYTokenSlippage(uint256)": {
        "notice": "Set yTokenSlipage"
      },
      "toggle(bool,bool)": {
        "notice": "Turn on / off minting and redemption"
      },
      "toggleCollateralRatio(bool)": {
        "notice": "Pause or unpause collateral ratio updates"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 292,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3600,
        "contract": "contracts/Pool.sol:Pool",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMasterOracle)9958"
      },
      {
        "astId": 3603,
        "contract": "contracts/Pool.sol:Pool",
        "label": "xToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IXToken)10142"
      },
      {
        "astId": 3606,
        "contract": "contracts/Pool.sol:Pool",
        "label": "yToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IYToken)10153"
      },
      {
        "astId": 3609,
        "contract": "contracts/Pool.sol:Pool",
        "label": "yTokenReserve",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IYTokenReserve)10177"
      },
      {
        "astId": 3612,
        "contract": "contracts/Pool.sol:Pool",
        "label": "swapStrategy",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ISwapStrategy)10036"
      },
      {
        "astId": 3614,
        "contract": "contracts/Pool.sol:Pool",
        "label": "treasury",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3619,
        "contract": "contracts/Pool.sol:Pool",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserInfo)3597_storage)"
      },
      {
        "astId": 3621,
        "contract": "contracts/Pool.sol:Pool",
        "label": "unclaimedEth",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3623,
        "contract": "contracts/Pool.sol:Pool",
        "label": "unclaimedXToken",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3625,
        "contract": "contracts/Pool.sol:Pool",
        "label": "unclaimedYToken",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3637,
        "contract": "contracts/Pool.sol:Pool",
        "label": "mintPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3640,
        "contract": "contracts/Pool.sol:Pool",
        "label": "redeemPaused",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3643,
        "contract": "contracts/Pool.sol:Pool",
        "label": "collateralRatio",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3645,
        "contract": "contracts/Pool.sol:Pool",
        "label": "lastRefreshCrTimestamp",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3648,
        "contract": "contracts/Pool.sol:Pool",
        "label": "refreshCooldown",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3651,
        "contract": "contracts/Pool.sol:Pool",
        "label": "ratioStepUp",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3654,
        "contract": "contracts/Pool.sol:Pool",
        "label": "ratioStepDown",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3657,
        "contract": "contracts/Pool.sol:Pool",
        "label": "priceTarget",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3660,
        "contract": "contracts/Pool.sol:Pool",
        "label": "priceBand",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3663,
        "contract": "contracts/Pool.sol:Pool",
        "label": "minCollateralRatio",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3666,
        "contract": "contracts/Pool.sol:Pool",
        "label": "yTokenSlippage",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3669,
        "contract": "contracts/Pool.sol:Pool",
        "label": "collateralRatioPaused",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 3672,
        "contract": "contracts/Pool.sol:Pool",
        "label": "redemptionFee",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 3678,
        "contract": "contracts/Pool.sol:Pool",
        "label": "mintingFee",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 5049,
        "contract": "contracts/Pool.sol:Pool",
        "label": "uniswapV2Router02",
        "offset": 0,
        "slot": "25",
        "type": "t_contract(IUniswapV2Router02)3553"
      },
      {
        "astId": 5053,
        "contract": "contracts/Pool.sol:Pool",
        "label": "arbers",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5056,
        "contract": "contracts/Pool.sol:Pool",
        "label": "xTokenWethPath",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5059,
        "contract": "contracts/Pool.sol:Pool",
        "label": "wethXTokenPath",
        "offset": 0,
        "slot": "28",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5062,
        "contract": "contracts/Pool.sol:Pool",
        "label": "yTokenWethPath",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterOracle)9958": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapStrategy)10036": {
        "encoding": "inplace",
        "label": "contract ISwapStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)3553": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IXToken)10142": {
        "encoding": "inplace",
        "label": "contract IXToken",
        "numberOfBytes": "20"
      },
      "t_contract(IYToken)10153": {
        "encoding": "inplace",
        "label": "contract IYToken",
        "numberOfBytes": "20"
      },
      "t_contract(IYTokenReserve)10177": {
        "encoding": "inplace",
        "label": "contract IYTokenReserve",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)3597_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Pool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3597_storage"
      },
      "t_struct(UserInfo)3597_storage": {
        "encoding": "inplace",
        "label": "struct Pool.UserInfo",
        "members": [
          {
            "astId": 3590,
            "contract": "contracts/Pool.sol:Pool",
            "label": "xTokenBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3592,
            "contract": "contracts/Pool.sol:Pool",
            "label": "yTokenBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3594,
            "contract": "contracts/Pool.sol:Pool",
            "label": "ethBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3596,
            "contract": "contracts/Pool.sol:Pool",
            "label": "lastAction",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}